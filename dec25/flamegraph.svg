<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="7540"><g><title>dec25`&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.01%)</title><rect x="0.0133%" y="469" width="0.0133%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.2633%" y="479.50"></text></g><g><title>dec25`&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (1 samples, 0.01%)</title><rect x="0.0133%" y="453" width="0.0133%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2633%" y="463.50"></text></g><g><title>dec25`&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (1 samples, 0.01%)</title><rect x="0.0133%" y="437" width="0.0133%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2633%" y="447.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.0265%" y="453" width="0.0133%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2765%" y="463.50"></text></g><g><title>dec25`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="0.0000%" y="565" width="0.0531%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.05%)</title><rect x="0.0000%" y="549" width="0.0531%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="559.50"></text></g><g><title>dec25`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="0.0000%" y="533" width="0.0531%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>dec25`core::str::iter::SplitInternal&lt;P&gt;::next (4 samples, 0.05%)</title><rect x="0.0000%" y="517" width="0.0531%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50"></text></g><g><title>dec25`&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (4 samples, 0.05%)</title><rect x="0.0000%" y="501" width="0.0531%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="511.50"></text></g><g><title>dec25`&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4 samples, 0.05%)</title><rect x="0.0000%" y="485" width="0.0531%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="495.50"></text></g><g><title>dec25`&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="0.0265%" y="469" width="0.0265%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="2"/><text x="0.2765%" y="479.50"></text></g><g><title>dec25`core::str::validations::next_code_point (1 samples, 0.01%)</title><rect x="0.0398%" y="453" width="0.0133%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.2898%" y="463.50"></text></g><g><title>dec25`alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="0.0531%" y="565" width="0.0133%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="0.3031%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="0.0531%" y="549" width="0.0133%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="0.3031%" y="559.50"></text></g><g><title>dec25`alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.03%)</title><rect x="0.0663%" y="565" width="0.0265%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="0.3163%" y="575.50"></text></g><g><title>dec25`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="0.0796%" y="549" width="0.0133%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="0.3296%" y="559.50"></text></g><g><title>dec25`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="0.0796%" y="533" width="0.0133%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="0.3296%" y="543.50"></text></g><g><title>dec25`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="0.0796%" y="517" width="0.0133%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.3296%" y="527.50"></text></g><g><title>dec25`core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="0.0796%" y="501" width="0.0133%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.3296%" y="511.50"></text></g><g><title>dec25`dec25::parse_data (8 samples, 0.11%)</title><rect x="0.0000%" y="581" width="0.1061%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="8"/><text x="0.2500%" y="591.50"></text></g><g><title>dec25`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.01%)</title><rect x="0.0928%" y="565" width="0.0133%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="0.3428%" y="575.50"></text></g><g><title>dec25`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="0.0928%" y="549" width="0.0133%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="0.3428%" y="559.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="0.0928%" y="533" width="0.0133%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.3428%" y="543.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="0.0928%" y="517" width="0.0133%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="0.3428%" y="527.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.0928%" y="501" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="0.3428%" y="511.50"></text></g><g><title>dec25`core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="0.0928%" y="485" width="0.0133%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="0.3428%" y="495.50"></text></g><g><title>dec25`core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="0.0928%" y="469" width="0.0133%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="0.3428%" y="479.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="0.0928%" y="453" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="0.3428%" y="463.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="0.0928%" y="437" width="0.0133%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="0.3428%" y="447.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (4 samples, 0.05%)</title><rect x="0.1061%" y="453" width="0.0531%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="4"/><text x="0.3561%" y="463.50"></text></g><g><title>dec25`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.32%)</title><rect x="0.6764%" y="373" width="0.3183%" height="15" fill="rgb(209,103,24)" fg:x="51" fg:w="24"/><text x="0.9264%" y="383.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.03%)</title><rect x="0.9947%" y="373" width="0.0265%" height="15" fill="rgb(229,88,8)" fg:x="75" fg:w="2"/><text x="1.2447%" y="383.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::next_n (8 samples, 0.11%)</title><rect x="1.0212%" y="373" width="0.1061%" height="15" fill="rgb(213,181,19)" fg:x="77" fg:w="8"/><text x="1.2712%" y="383.50"></text></g><g><title>dec25`&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 1.02%)</title><rect x="0.3050%" y="437" width="1.0212%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="77"/><text x="0.5550%" y="447.50"></text></g><g><title>dec25`&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.95%)</title><rect x="0.3714%" y="421" width="0.9549%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="72"/><text x="0.6214%" y="431.50"></text></g><g><title>dec25`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.93%)</title><rect x="0.3979%" y="405" width="0.9284%" height="15" fill="rgb(233,36,39)" fg:x="30" fg:w="70"/><text x="0.6479%" y="415.50"></text></g><g><title>dec25`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.74%)</title><rect x="0.5836%" y="389" width="0.7427%" height="15" fill="rgb(226,3,54)" fg:x="44" fg:w="56"/><text x="0.8336%" y="399.50"></text></g><g><title>dec25`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (15 samples, 0.20%)</title><rect x="1.1273%" y="373" width="0.1989%" height="15" fill="rgb(245,192,40)" fg:x="85" fg:w="15"/><text x="1.3773%" y="383.50"></text></g><g><title>dec25`hashbrown::raw::neon::Group::match_full (4 samples, 0.05%)</title><rect x="1.2732%" y="357" width="0.0531%" height="15" fill="rgb(238,167,29)" fg:x="96" fg:w="4"/><text x="1.5232%" y="367.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="1.3263%" y="437" width="0.0133%" height="15" fill="rgb(232,182,51)" fg:x="100" fg:w="1"/><text x="1.5763%" y="447.50"></text></g><g><title>dec25`&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.07%)</title><rect x="1.4324%" y="421" width="0.0663%" height="15" fill="rgb(231,60,39)" fg:x="108" fg:w="5"/><text x="1.6824%" y="431.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (5 samples, 0.07%)</title><rect x="1.4987%" y="421" width="0.0663%" height="15" fill="rgb(208,69,12)" fg:x="113" fg:w="5"/><text x="1.7487%" y="431.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="2.5597%" y="373" width="0.0398%" height="15" fill="rgb(235,93,37)" fg:x="193" fg:w="3"/><text x="2.8097%" y="383.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="2.9178%" y="357" width="0.0398%" height="15" fill="rgb(213,116,39)" fg:x="220" fg:w="3"/><text x="3.1678%" y="367.50"></text></g><g><title>dec25`core::option::Option&lt;T&gt;::unwrap (8 samples, 0.11%)</title><rect x="3.6207%" y="325" width="0.1061%" height="15" fill="rgb(222,207,29)" fg:x="273" fg:w="8"/><text x="3.8707%" y="335.50"></text></g><g><title>dec25`hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="3.7268%" y="325" width="0.0133%" height="15" fill="rgb(206,96,30)" fg:x="281" fg:w="1"/><text x="3.9768%" y="335.50"></text></g><g><title>dec25`std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (2 samples, 0.03%)</title><rect x="3.7401%" y="325" width="0.0265%" height="15" fill="rgb(218,138,4)" fg:x="282" fg:w="2"/><text x="3.9901%" y="335.50"></text></g><g><title>dec25`dec25::find_cut_and_reduce::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="3.7533%" y="309" width="0.0133%" height="15" fill="rgb(250,191,14)" fg:x="283" fg:w="1"/><text x="4.0033%" y="319.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.01%)</title><rect x="3.7798%" y="309" width="0.0133%" height="15" fill="rgb(239,60,40)" fg:x="285" fg:w="1"/><text x="4.0298%" y="319.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.04%)</title><rect x="3.8196%" y="293" width="0.0398%" height="15" fill="rgb(206,27,48)" fg:x="288" fg:w="3"/><text x="4.0696%" y="303.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::vld1_u8 (3 samples, 0.04%)</title><rect x="4.0318%" y="261" width="0.0398%" height="15" fill="rgb(225,35,8)" fg:x="304" fg:w="3"/><text x="4.2818%" y="271.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::generated::vcltz_s8 (4 samples, 0.05%)</title><rect x="4.2440%" y="229" width="0.0531%" height="15" fill="rgb(250,213,24)" fg:x="320" fg:w="4"/><text x="4.4940%" y="239.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="4.2971%" y="229" width="0.0133%" height="15" fill="rgb(247,123,22)" fg:x="324" fg:w="1"/><text x="4.5471%" y="239.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (23 samples, 0.31%)</title><rect x="4.1645%" y="245" width="0.3050%" height="15" fill="rgb(231,138,38)" fg:x="314" fg:w="23"/><text x="4.4145%" y="255.50"></text></g><g><title>dec25`hashbrown::raw::neon::Group::match_empty_or_deleted (12 samples, 0.16%)</title><rect x="4.3103%" y="229" width="0.1592%" height="15" fill="rgb(231,145,46)" fg:x="325" fg:w="12"/><text x="4.5603%" y="239.50"></text></g><g><title>dec25`std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (56 samples, 0.74%)</title><rect x="3.7666%" y="325" width="0.7427%" height="15" fill="rgb(251,118,11)" fg:x="284" fg:w="56"/><text x="4.0166%" y="335.50"></text></g><g><title>dec25`hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (54 samples, 0.72%)</title><rect x="3.7931%" y="309" width="0.7162%" height="15" fill="rgb(217,147,25)" fg:x="286" fg:w="54"/><text x="4.0431%" y="319.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (49 samples, 0.65%)</title><rect x="3.8594%" y="293" width="0.6499%" height="15" fill="rgb(247,81,37)" fg:x="291" fg:w="49"/><text x="4.1094%" y="303.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (36 samples, 0.48%)</title><rect x="4.0318%" y="277" width="0.4775%" height="15" fill="rgb(209,12,38)" fg:x="304" fg:w="36"/><text x="4.2818%" y="287.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (33 samples, 0.44%)</title><rect x="4.0716%" y="261" width="0.4377%" height="15" fill="rgb(227,1,9)" fg:x="307" fg:w="33"/><text x="4.3216%" y="271.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (3 samples, 0.04%)</title><rect x="4.4695%" y="245" width="0.0398%" height="15" fill="rgb(248,47,43)" fg:x="337" fg:w="3"/><text x="4.7195%" y="255.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="4.5358%" y="309" width="0.0133%" height="15" fill="rgb(221,10,30)" fg:x="342" fg:w="1"/><text x="4.7858%" y="319.50"></text></g><g><title>dec25`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.16%)</title><rect x="4.5623%" y="293" width="0.1592%" height="15" fill="rgb(210,229,1)" fg:x="344" fg:w="12"/><text x="4.8123%" y="303.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.01%)</title><rect x="4.7215%" y="293" width="0.0133%" height="15" fill="rgb(222,148,37)" fg:x="356" fg:w="1"/><text x="4.9715%" y="303.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.03%)</title><rect x="4.7613%" y="261" width="0.0265%" height="15" fill="rgb(234,67,33)" fg:x="359" fg:w="2"/><text x="5.0113%" y="271.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.13%)</title><rect x="4.7878%" y="261" width="0.1326%" height="15" fill="rgb(247,98,35)" fg:x="361" fg:w="10"/><text x="5.0378%" y="271.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (35 samples, 0.46%)</title><rect x="4.7613%" y="277" width="0.4642%" height="15" fill="rgb(247,138,52)" fg:x="359" fg:w="35"/><text x="5.0113%" y="287.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (23 samples, 0.31%)</title><rect x="4.9204%" y="261" width="0.3050%" height="15" fill="rgb(213,79,30)" fg:x="371" fg:w="23"/><text x="5.1704%" y="271.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.04%)</title><rect x="5.2255%" y="277" width="0.0398%" height="15" fill="rgb(246,177,23)" fg:x="394" fg:w="3"/><text x="5.4755%" y="287.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.09%)</title><rect x="5.3714%" y="229" width="0.0928%" height="15" fill="rgb(230,62,27)" fg:x="405" fg:w="7"/><text x="5.6214%" y="239.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.13%)</title><rect x="5.6366%" y="165" width="0.1326%" height="15" fill="rgb(216,154,8)" fg:x="425" fg:w="10"/><text x="5.8866%" y="175.50"></text></g><g><title>dec25`core::cmp::min_by (2 samples, 0.03%)</title><rect x="5.7427%" y="149" width="0.0265%" height="15" fill="rgb(244,35,45)" fg:x="433" fg:w="2"/><text x="5.9927%" y="159.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.01%)</title><rect x="5.7560%" y="133" width="0.0133%" height="15" fill="rgb(251,115,12)" fg:x="434" fg:w="1"/><text x="6.0060%" y="143.50"></text></g><g><title>dec25`core::hash::Hash::hash_slice (29 samples, 0.38%)</title><rect x="5.4642%" y="229" width="0.3846%" height="15" fill="rgb(240,54,50)" fg:x="412" fg:w="29"/><text x="5.7142%" y="239.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (19 samples, 0.25%)</title><rect x="5.5968%" y="213" width="0.2520%" height="15" fill="rgb(233,84,52)" fg:x="422" fg:w="19"/><text x="5.8468%" y="223.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (19 samples, 0.25%)</title><rect x="5.5968%" y="197" width="0.2520%" height="15" fill="rgb(207,117,47)" fg:x="422" fg:w="19"/><text x="5.8468%" y="207.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (18 samples, 0.24%)</title><rect x="5.6101%" y="181" width="0.2387%" height="15" fill="rgb(249,43,39)" fg:x="423" fg:w="18"/><text x="5.8601%" y="191.50"></text></g><g><title>dec25`core::hash::sip::u8to64_le (6 samples, 0.08%)</title><rect x="5.7692%" y="165" width="0.0796%" height="15" fill="rgb(209,38,44)" fg:x="435" fg:w="6"/><text x="6.0192%" y="175.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.09%)</title><rect x="5.8753%" y="181" width="0.0928%" height="15" fill="rgb(236,212,23)" fg:x="443" fg:w="7"/><text x="6.1253%" y="191.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.08%)</title><rect x="5.9682%" y="181" width="0.0796%" height="15" fill="rgb(242,79,21)" fg:x="450" fg:w="6"/><text x="6.2182%" y="191.50"></text></g><g><title>dec25`core::hash::Hasher::write_length_prefix (18 samples, 0.24%)</title><rect x="5.8488%" y="229" width="0.2387%" height="15" fill="rgb(211,96,35)" fg:x="441" fg:w="18"/><text x="6.0988%" y="239.50"></text></g><g><title>dec25`core::hash::Hasher::write_usize (18 samples, 0.24%)</title><rect x="5.8488%" y="213" width="0.2387%" height="15" fill="rgb(253,215,40)" fg:x="441" fg:w="18"/><text x="6.0988%" y="223.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.23%)</title><rect x="5.8621%" y="197" width="0.2255%" height="15" fill="rgb(211,81,21)" fg:x="442" fg:w="17"/><text x="6.1121%" y="207.50"></text></g><g><title>dec25`core::hash::sip::u8to64_le (3 samples, 0.04%)</title><rect x="6.0477%" y="181" width="0.0398%" height="15" fill="rgb(208,190,38)" fg:x="456" fg:w="3"/><text x="6.2977%" y="191.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (65 samples, 0.86%)</title><rect x="5.2653%" y="277" width="0.8621%" height="15" fill="rgb(235,213,38)" fg:x="397" fg:w="65"/><text x="5.5153%" y="287.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (65 samples, 0.86%)</title><rect x="5.2653%" y="261" width="0.8621%" height="15" fill="rgb(237,122,38)" fg:x="397" fg:w="65"/><text x="5.5153%" y="271.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (65 samples, 0.86%)</title><rect x="5.2653%" y="245" width="0.8621%" height="15" fill="rgb(244,218,35)" fg:x="397" fg:w="65"/><text x="5.5153%" y="255.50"></text></g><g><title>dec25`core::slice::iter::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (3 samples, 0.04%)</title><rect x="6.0875%" y="229" width="0.0398%" height="15" fill="rgb(240,68,47)" fg:x="459" fg:w="3"/><text x="6.3375%" y="239.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (108 samples, 1.43%)</title><rect x="4.7347%" y="293" width="1.4324%" height="15" fill="rgb(210,16,53)" fg:x="357" fg:w="108"/><text x="4.9847%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.04%)</title><rect x="6.1273%" y="277" width="0.0398%" height="15" fill="rgb(235,124,12)" fg:x="462" fg:w="3"/><text x="6.3773%" y="287.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vceq_u8 (3 samples, 0.04%)</title><rect x="6.3130%" y="277" width="0.0398%" height="15" fill="rgb(224,169,11)" fg:x="476" fg:w="3"/><text x="6.5630%" y="287.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="6.3528%" y="277" width="0.0133%" height="15" fill="rgb(250,166,2)" fg:x="479" fg:w="1"/><text x="6.6028%" y="287.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::vdup_n_u8 (2 samples, 0.03%)</title><rect x="6.3660%" y="277" width="0.0265%" height="15" fill="rgb(242,216,29)" fg:x="480" fg:w="2"/><text x="6.6160%" y="287.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.03%)</title><rect x="6.3926%" y="277" width="0.0265%" height="15" fill="rgb(230,116,27)" fg:x="482" fg:w="2"/><text x="6.6426%" y="287.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="6.4987%" y="197" width="0.0133%" height="15" fill="rgb(228,99,48)" fg:x="490" fg:w="1"/><text x="6.7487%" y="207.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="6.5252%" y="181" width="0.0133%" height="15" fill="rgb(253,11,6)" fg:x="492" fg:w="1"/><text x="6.7752%" y="191.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.01%)</title><rect x="6.5252%" y="165" width="0.0133%" height="15" fill="rgb(247,143,39)" fg:x="492" fg:w="1"/><text x="6.7752%" y="175.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.01%)</title><rect x="6.5782%" y="117" width="0.0133%" height="15" fill="rgb(236,97,10)" fg:x="496" fg:w="1"/><text x="6.8282%" y="127.50"></text></g><g><title>dec25`DYLD-STUB$$memcmp (1 samples, 0.01%)</title><rect x="6.5915%" y="117" width="0.0133%" height="15" fill="rgb(233,208,19)" fg:x="497" fg:w="1"/><text x="6.8415%" y="127.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::try_fold (8 samples, 0.11%)</title><rect x="6.5119%" y="197" width="0.1061%" height="15" fill="rgb(216,164,2)" fg:x="491" fg:w="8"/><text x="6.7619%" y="207.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (6 samples, 0.08%)</title><rect x="6.5385%" y="181" width="0.0796%" height="15" fill="rgb(220,129,5)" fg:x="493" fg:w="6"/><text x="6.7885%" y="191.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (6 samples, 0.08%)</title><rect x="6.5385%" y="165" width="0.0796%" height="15" fill="rgb(242,17,10)" fg:x="493" fg:w="6"/><text x="6.7885%" y="175.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.07%)</title><rect x="6.5517%" y="149" width="0.0663%" height="15" fill="rgb(242,107,0)" fg:x="494" fg:w="5"/><text x="6.8017%" y="159.50"></text></g><g><title>dec25`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.05%)</title><rect x="6.5650%" y="133" width="0.0531%" height="15" fill="rgb(251,28,31)" fg:x="495" fg:w="4"/><text x="6.8150%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.01%)</title><rect x="6.6048%" y="117" width="0.0133%" height="15" fill="rgb(233,223,10)" fg:x="498" fg:w="1"/><text x="6.8548%" y="127.50"></text></g><g><title>dec25`core::cmp::min_by (2 samples, 0.03%)</title><rect x="6.6446%" y="165" width="0.0265%" height="15" fill="rgb(215,21,27)" fg:x="501" fg:w="2"/><text x="6.8946%" y="175.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="6.6446%" y="149" width="0.0265%" height="15" fill="rgb(232,23,21)" fg:x="501" fg:w="2"/><text x="6.8946%" y="159.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.24%)</title><rect x="6.4589%" y="213" width="0.2387%" height="15" fill="rgb(244,5,23)" fg:x="487" fg:w="18"/><text x="6.7089%" y="223.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::zip (6 samples, 0.08%)</title><rect x="6.6180%" y="197" width="0.0796%" height="15" fill="rgb(226,81,46)" fg:x="499" fg:w="6"/><text x="6.8680%" y="207.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (4 samples, 0.05%)</title><rect x="6.6446%" y="181" width="0.0531%" height="15" fill="rgb(247,70,30)" fg:x="501" fg:w="4"/><text x="6.8946%" y="191.50"></text></g><g><title>dec25`core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (2 samples, 0.03%)</title><rect x="6.6711%" y="165" width="0.0265%" height="15" fill="rgb(212,68,19)" fg:x="503" fg:w="2"/><text x="6.9211%" y="175.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.03%)</title><rect x="6.6711%" y="149" width="0.0265%" height="15" fill="rgb(240,187,13)" fg:x="503" fg:w="2"/><text x="6.9211%" y="159.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.04%)</title><rect x="6.6976%" y="213" width="0.0398%" height="15" fill="rgb(223,113,26)" fg:x="505" fg:w="3"/><text x="6.9476%" y="223.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (25 samples, 0.33%)</title><rect x="6.4191%" y="277" width="0.3316%" height="15" fill="rgb(206,192,2)" fg:x="484" fg:w="25"/><text x="6.6691%" y="287.50"></text></g><g><title>dec25`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (24 samples, 0.32%)</title><rect x="6.4324%" y="261" width="0.3183%" height="15" fill="rgb(241,108,4)" fg:x="485" fg:w="24"/><text x="6.6824%" y="271.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.32%)</title><rect x="6.4324%" y="245" width="0.3183%" height="15" fill="rgb(247,173,49)" fg:x="485" fg:w="24"/><text x="6.6824%" y="255.50"></text></g><g><title>dec25`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (23 samples, 0.31%)</title><rect x="6.4456%" y="229" width="0.3050%" height="15" fill="rgb(224,114,35)" fg:x="486" fg:w="23"/><text x="6.6956%" y="239.50"></text></g><g><title>dec25`&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="6.7374%" y="213" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="508" fg:w="1"/><text x="6.9874%" y="223.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find (53 samples, 0.70%)</title><rect x="6.1671%" y="293" width="0.7029%" height="15" fill="rgb(245,172,44)" fg:x="465" fg:w="53"/><text x="6.4171%" y="303.50"></text></g><g><title>dec25`hashbrown::raw::neon::Group::match_byte (9 samples, 0.12%)</title><rect x="6.7507%" y="277" width="0.1194%" height="15" fill="rgb(236,23,11)" fg:x="509" fg:w="9"/><text x="7.0007%" y="287.50"></text></g><g><title>dec25`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="7.2679%" y="213" width="0.0133%" height="15" fill="rgb(205,117,38)" fg:x="548" fg:w="1"/><text x="7.5179%" y="223.50"></text></g><g><title>dec25`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (2 samples, 0.03%)</title><rect x="7.2679%" y="261" width="0.0265%" height="15" fill="rgb(237,72,25)" fg:x="548" fg:w="2"/><text x="7.5179%" y="271.50"></text></g><g><title>dec25`&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="7.2679%" y="245" width="0.0265%" height="15" fill="rgb(244,70,9)" fg:x="548" fg:w="2"/><text x="7.5179%" y="255.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (2 samples, 0.03%)</title><rect x="7.2679%" y="229" width="0.0265%" height="15" fill="rgb(217,125,39)" fg:x="548" fg:w="2"/><text x="7.5179%" y="239.50"></text></g><g><title>dec25`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="7.2812%" y="213" width="0.0133%" height="15" fill="rgb(235,36,10)" fg:x="549" fg:w="1"/><text x="7.5312%" y="223.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.13%)</title><rect x="7.2944%" y="261" width="0.1326%" height="15" fill="rgb(251,123,47)" fg:x="550" fg:w="10"/><text x="7.5444%" y="271.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.03%)</title><rect x="7.4934%" y="197" width="0.0265%" height="15" fill="rgb(221,13,13)" fg:x="565" fg:w="2"/><text x="7.7434%" y="207.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.12%)</title><rect x="7.5199%" y="197" width="0.1194%" height="15" fill="rgb(238,131,9)" fg:x="567" fg:w="9"/><text x="7.7699%" y="207.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (46 samples, 0.61%)</title><rect x="7.4934%" y="213" width="0.6101%" height="15" fill="rgb(211,50,8)" fg:x="565" fg:w="46"/><text x="7.7434%" y="223.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 0.46%)</title><rect x="7.6393%" y="197" width="0.4642%" height="15" fill="rgb(245,182,24)" fg:x="576" fg:w="35"/><text x="7.8893%" y="207.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.04%)</title><rect x="8.1034%" y="213" width="0.0398%" height="15" fill="rgb(242,14,37)" fg:x="611" fg:w="3"/><text x="8.3534%" y="223.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="8.1432%" y="213" width="0.0265%" height="15" fill="rgb(246,228,12)" fg:x="614" fg:w="2"/><text x="8.3932%" y="223.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.07%)</title><rect x="8.2228%" y="165" width="0.0663%" height="15" fill="rgb(213,55,15)" fg:x="620" fg:w="5"/><text x="8.4728%" y="175.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.04%)</title><rect x="8.5676%" y="69" width="0.0398%" height="15" fill="rgb(209,9,3)" fg:x="646" fg:w="3"/><text x="8.8176%" y="79.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.24%)</title><rect x="8.3820%" y="101" width="0.2387%" height="15" fill="rgb(230,59,30)" fg:x="632" fg:w="18"/><text x="8.6320%" y="111.50"></text></g><g><title>dec25`core::cmp::min_by (9 samples, 0.12%)</title><rect x="8.5013%" y="85" width="0.1194%" height="15" fill="rgb(209,121,21)" fg:x="641" fg:w="9"/><text x="8.7513%" y="95.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="8.6074%" y="69" width="0.0133%" height="15" fill="rgb(220,109,13)" fg:x="649" fg:w="1"/><text x="8.8574%" y="79.50"></text></g><g><title>dec25`core::hash::Hash::hash_slice (29 samples, 0.38%)</title><rect x="8.2891%" y="165" width="0.3846%" height="15" fill="rgb(232,18,1)" fg:x="625" fg:w="29"/><text x="8.5391%" y="175.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.33%)</title><rect x="8.3422%" y="149" width="0.3316%" height="15" fill="rgb(215,41,42)" fg:x="629" fg:w="25"/><text x="8.5922%" y="159.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (24 samples, 0.32%)</title><rect x="8.3554%" y="133" width="0.3183%" height="15" fill="rgb(224,123,36)" fg:x="630" fg:w="24"/><text x="8.6054%" y="143.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (23 samples, 0.31%)</title><rect x="8.3687%" y="117" width="0.3050%" height="15" fill="rgb(240,125,3)" fg:x="631" fg:w="23"/><text x="8.6187%" y="127.50"></text></g><g><title>dec25`core::hash::sip::u8to64_le (4 samples, 0.05%)</title><rect x="8.6207%" y="101" width="0.0531%" height="15" fill="rgb(205,98,50)" fg:x="650" fg:w="4"/><text x="8.8707%" y="111.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.11%)</title><rect x="8.6870%" y="117" width="0.1061%" height="15" fill="rgb(205,185,37)" fg:x="655" fg:w="8"/><text x="8.9370%" y="127.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16 samples, 0.21%)</title><rect x="8.7931%" y="117" width="0.2122%" height="15" fill="rgb(238,207,15)" fg:x="663" fg:w="16"/><text x="9.0431%" y="127.50"></text></g><g><title>dec25`core::hash::Hasher::write_length_prefix (26 samples, 0.34%)</title><rect x="8.6737%" y="165" width="0.3448%" height="15" fill="rgb(213,199,42)" fg:x="654" fg:w="26"/><text x="8.9237%" y="175.50"></text></g><g><title>dec25`core::hash::Hasher::write_usize (26 samples, 0.34%)</title><rect x="8.6737%" y="149" width="0.3448%" height="15" fill="rgb(235,201,11)" fg:x="654" fg:w="26"/><text x="8.9237%" y="159.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.34%)</title><rect x="8.6737%" y="133" width="0.3448%" height="15" fill="rgb(207,46,11)" fg:x="654" fg:w="26"/><text x="8.9237%" y="143.50"></text></g><g><title>dec25`core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="9.0053%" y="117" width="0.0133%" height="15" fill="rgb(241,35,35)" fg:x="679" fg:w="1"/><text x="9.2553%" y="127.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (66 samples, 0.88%)</title><rect x="8.1698%" y="213" width="0.8753%" height="15" fill="rgb(243,32,47)" fg:x="616" fg:w="66"/><text x="8.4198%" y="223.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (65 samples, 0.86%)</title><rect x="8.1830%" y="197" width="0.8621%" height="15" fill="rgb(247,202,23)" fg:x="617" fg:w="65"/><text x="8.4330%" y="207.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (65 samples, 0.86%)</title><rect x="8.1830%" y="181" width="0.8621%" height="15" fill="rgb(219,102,11)" fg:x="617" fg:w="65"/><text x="8.4330%" y="191.50"></text></g><g><title>dec25`core::slice::iter::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (2 samples, 0.03%)</title><rect x="9.0186%" y="165" width="0.0265%" height="15" fill="rgb(243,110,44)" fg:x="680" fg:w="2"/><text x="9.2686%" y="175.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (126 samples, 1.67%)</title><rect x="7.4271%" y="261" width="1.6711%" height="15" fill="rgb(222,74,54)" fg:x="560" fg:w="126"/><text x="7.6771%" y="271.50"></text></g><g><title>dec25`hashbrown::map::make_hasher::_{{closure}} (122 samples, 1.62%)</title><rect x="7.4801%" y="245" width="1.6180%" height="15" fill="rgb(216,99,12)" fg:x="564" fg:w="122"/><text x="7.7301%" y="255.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (121 samples, 1.60%)</title><rect x="7.4934%" y="229" width="1.6048%" height="15" fill="rgb(226,22,26)" fg:x="565" fg:w="121"/><text x="7.7434%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.05%)</title><rect x="9.0451%" y="213" width="0.0531%" height="15" fill="rgb(217,163,10)" fg:x="682" fg:w="4"/><text x="9.2951%" y="223.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.03%)</title><rect x="9.2308%" y="245" width="0.0265%" height="15" fill="rgb(213,25,53)" fg:x="696" fg:w="2"/><text x="9.4808%" y="255.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::generated::vcltz_s8 (7 samples, 0.09%)</title><rect x="9.3634%" y="213" width="0.0928%" height="15" fill="rgb(252,105,26)" fg:x="706" fg:w="7"/><text x="9.6134%" y="223.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.03%)</title><rect x="9.4562%" y="213" width="0.0265%" height="15" fill="rgb(220,39,43)" fg:x="713" fg:w="2"/><text x="9.7062%" y="223.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::vget_lane_u64 (2 samples, 0.03%)</title><rect x="9.4828%" y="213" width="0.0265%" height="15" fill="rgb(229,68,48)" fg:x="715" fg:w="2"/><text x="9.7328%" y="223.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (23 samples, 0.31%)</title><rect x="9.2971%" y="229" width="0.3050%" height="15" fill="rgb(252,8,32)" fg:x="701" fg:w="23"/><text x="9.5471%" y="239.50"></text></g><g><title>dec25`hashbrown::raw::neon::Group::match_empty_or_deleted (7 samples, 0.09%)</title><rect x="9.5093%" y="213" width="0.0928%" height="15" fill="rgb(223,20,43)" fg:x="717" fg:w="7"/><text x="9.7593%" y="223.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (41 samples, 0.54%)</title><rect x="9.0981%" y="261" width="0.5438%" height="15" fill="rgb(229,81,49)" fg:x="686" fg:w="41"/><text x="9.3481%" y="271.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (29 samples, 0.38%)</title><rect x="9.2573%" y="245" width="0.3846%" height="15" fill="rgb(236,28,36)" fg:x="698" fg:w="29"/><text x="9.5073%" y="255.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (3 samples, 0.04%)</title><rect x="9.6021%" y="229" width="0.0398%" height="15" fill="rgb(249,185,26)" fg:x="724" fg:w="3"/><text x="9.8521%" y="239.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.01%)</title><rect x="9.6684%" y="229" width="0.0133%" height="15" fill="rgb(249,174,33)" fg:x="729" fg:w="1"/><text x="9.9184%" y="239.50"></text></g><g><title>dec25`hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="9.6684%" y="213" width="0.0133%" height="15" fill="rgb(233,201,37)" fg:x="729" fg:w="1"/><text x="9.9184%" y="223.50"></text></g><g><title>dec25`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="9.6684%" y="197" width="0.0133%" height="15" fill="rgb(221,78,26)" fg:x="729" fg:w="1"/><text x="9.9184%" y="207.50"></text></g><g><title>dec25`alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="9.6684%" y="181" width="0.0133%" height="15" fill="rgb(250,127,30)" fg:x="729" fg:w="1"/><text x="9.9184%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="9.6684%" y="165" width="0.0133%" height="15" fill="rgb(230,49,44)" fg:x="729" fg:w="1"/><text x="9.9184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="9.6684%" y="149" width="0.0133%" height="15" fill="rgb(229,67,23)" fg:x="729" fg:w="1"/><text x="9.9184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="9.6684%" y="133" width="0.0133%" height="15" fill="rgb(249,83,47)" fg:x="729" fg:w="1"/><text x="9.9184%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="9.6684%" y="117" width="0.0133%" height="15" fill="rgb(215,43,3)" fg:x="729" fg:w="1"/><text x="9.9184%" y="127.50"></text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (4 samples, 0.05%)</title><rect x="9.6552%" y="245" width="0.0531%" height="15" fill="rgb(238,154,13)" fg:x="728" fg:w="4"/><text x="9.9052%" y="255.50"></text></g><g><title>dec25`hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.03%)</title><rect x="9.6817%" y="229" width="0.0265%" height="15" fill="rgb(219,56,2)" fg:x="730" fg:w="2"/><text x="9.9317%" y="239.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (215 samples, 2.85%)</title><rect x="6.8700%" y="293" width="2.8515%" height="15" fill="rgb(233,0,4)" fg:x="518" fg:w="215"/><text x="7.1200%" y="303.50">de..</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (210 samples, 2.79%)</title><rect x="6.9363%" y="277" width="2.7851%" height="15" fill="rgb(235,30,7)" fg:x="523" fg:w="210"/><text x="7.1863%" y="287.50">de..</text></g><g><title>dec25`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (6 samples, 0.08%)</title><rect x="9.6419%" y="261" width="0.0796%" height="15" fill="rgb(250,79,13)" fg:x="727" fg:w="6"/><text x="9.8919%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="9.7082%" y="245" width="0.0133%" height="15" fill="rgb(211,146,34)" fg:x="732" fg:w="1"/><text x="9.9582%" y="255.50"></text></g><g><title>dec25`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (394 samples, 5.23%)</title><rect x="4.5093%" y="325" width="5.2255%" height="15" fill="rgb(228,22,38)" fg:x="340" fg:w="394"/><text x="4.7593%" y="335.50">dec25`..</text></g><g><title>dec25`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (391 samples, 5.19%)</title><rect x="4.5491%" y="309" width="5.1857%" height="15" fill="rgb(235,168,5)" fg:x="343" fg:w="391"/><text x="4.7991%" y="319.50">dec25`..</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="9.7215%" y="293" width="0.0133%" height="15" fill="rgb(221,155,16)" fg:x="733" fg:w="1"/><text x="9.9715%" y="303.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="9.8408%" y="309" width="0.0265%" height="15" fill="rgb(215,215,53)" fg:x="742" fg:w="2"/><text x="10.0908%" y="319.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="10.1326%" y="293" width="0.0133%" height="15" fill="rgb(223,4,10)" fg:x="764" fg:w="1"/><text x="10.3826%" y="303.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="10.3714%" y="277" width="0.0133%" height="15" fill="rgb(234,103,6)" fg:x="782" fg:w="1"/><text x="10.6214%" y="287.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25 samples, 0.33%)</title><rect x="10.4244%" y="261" width="0.3316%" height="15" fill="rgb(227,97,0)" fg:x="786" fg:w="25"/><text x="10.6744%" y="271.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 1.62%)</title><rect x="10.7560%" y="261" width="1.6180%" height="15" fill="rgb(234,150,53)" fg:x="811" fg:w="122"/><text x="11.0060%" y="271.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (549 samples, 7.28%)</title><rect x="10.3846%" y="277" width="7.2812%" height="15" fill="rgb(228,201,54)" fg:x="783" fg:w="549"/><text x="10.6346%" y="287.50">dec25`&lt;std..</text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (399 samples, 5.29%)</title><rect x="12.3740%" y="261" width="5.2918%" height="15" fill="rgb(222,22,37)" fg:x="933" fg:w="399"/><text x="12.6240%" y="271.50">dec25`..</text></g><g><title>dec25`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (134 samples, 1.78%)</title><rect x="17.6658%" y="277" width="1.7772%" height="15" fill="rgb(237,53,32)" fg:x="1332" fg:w="134"/><text x="17.9158%" y="287.50">d..</text></g><g><title>dec25`DYLD-STUB$$memcpy (10 samples, 0.13%)</title><rect x="19.4430%" y="277" width="0.1326%" height="15" fill="rgb(233,25,53)" fg:x="1466" fg:w="10"/><text x="19.6930%" y="287.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 1.21%)</title><rect x="20.6233%" y="245" width="1.2069%" height="15" fill="rgb(210,40,34)" fg:x="1555" fg:w="91"/><text x="20.8733%" y="255.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (19 samples, 0.25%)</title><rect x="24.5225%" y="149" width="0.2520%" height="15" fill="rgb(241,220,44)" fg:x="1849" fg:w="19"/><text x="24.7725%" y="159.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (153 samples, 2.03%)</title><rect x="22.8912%" y="181" width="2.0292%" height="15" fill="rgb(235,28,35)" fg:x="1726" fg:w="153"/><text x="23.1412%" y="191.50">d..</text></g><g><title>dec25`core::cmp::min_by (73 samples, 0.97%)</title><rect x="23.9523%" y="165" width="0.9682%" height="15" fill="rgb(210,56,17)" fg:x="1806" fg:w="73"/><text x="24.2023%" y="175.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (11 samples, 0.15%)</title><rect x="24.7745%" y="149" width="0.1459%" height="15" fill="rgb(224,130,29)" fg:x="1868" fg:w="11"/><text x="25.0245%" y="159.50"></text></g><g><title>dec25`core::cmp::min_by (1 samples, 0.01%)</title><rect x="24.9204%" y="181" width="0.0133%" height="15" fill="rgb(235,212,8)" fg:x="1879" fg:w="1"/><text x="25.1704%" y="191.50"></text></g><g><title>dec25`core::hash::Hash::hash_slice (331 samples, 4.39%)</title><rect x="21.8302%" y="245" width="4.3899%" height="15" fill="rgb(223,33,50)" fg:x="1646" fg:w="331"/><text x="22.0802%" y="255.50">dec25..</text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (283 samples, 3.75%)</title><rect x="22.4668%" y="229" width="3.7533%" height="15" fill="rgb(219,149,13)" fg:x="1694" fg:w="283"/><text x="22.7168%" y="239.50">dec2..</text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (278 samples, 3.69%)</title><rect x="22.5332%" y="213" width="3.6870%" height="15" fill="rgb(250,156,29)" fg:x="1699" fg:w="278"/><text x="22.7832%" y="223.50">dec2..</text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (265 samples, 3.51%)</title><rect x="22.7056%" y="197" width="3.5146%" height="15" fill="rgb(216,193,19)" fg:x="1712" fg:w="265"/><text x="22.9556%" y="207.50">dec..</text></g><g><title>dec25`core::hash::sip::u8to64_le (97 samples, 1.29%)</title><rect x="24.9337%" y="181" width="1.2865%" height="15" fill="rgb(216,135,14)" fg:x="1880" fg:w="97"/><text x="25.1837%" y="191.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (84 samples, 1.11%)</title><rect x="26.4854%" y="197" width="1.1141%" height="15" fill="rgb(241,47,5)" fg:x="1997" fg:w="84"/><text x="26.7354%" y="207.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (101 samples, 1.34%)</title><rect x="27.5995%" y="197" width="1.3395%" height="15" fill="rgb(233,42,35)" fg:x="2081" fg:w="101"/><text x="27.8495%" y="207.50"></text></g><g><title>dec25`core::hash::Hasher::write_length_prefix (230 samples, 3.05%)</title><rect x="26.2202%" y="245" width="3.0504%" height="15" fill="rgb(231,13,6)" fg:x="1977" fg:w="230"/><text x="26.4702%" y="255.50">dec..</text></g><g><title>dec25`core::hash::Hasher::write_usize (225 samples, 2.98%)</title><rect x="26.2865%" y="229" width="2.9841%" height="15" fill="rgb(207,181,40)" fg:x="1982" fg:w="225"/><text x="26.5365%" y="239.50">dec..</text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (216 samples, 2.86%)</title><rect x="26.4058%" y="213" width="2.8647%" height="15" fill="rgb(254,173,49)" fg:x="1991" fg:w="216"/><text x="26.6558%" y="223.50">de..</text></g><g><title>dec25`core::hash::sip::u8to64_le (25 samples, 0.33%)</title><rect x="28.9390%" y="197" width="0.3316%" height="15" fill="rgb(221,1,38)" fg:x="2182" fg:w="25"/><text x="29.1890%" y="207.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (790 samples, 10.48%)</title><rect x="19.5756%" y="277" width="10.4775%" height="15" fill="rgb(206,124,46)" fg:x="1476" fg:w="790"/><text x="19.8256%" y="287.50">dec25`core::has..</text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (783 samples, 10.38%)</title><rect x="19.6684%" y="261" width="10.3846%" height="15" fill="rgb(249,21,11)" fg:x="1483" fg:w="783"/><text x="19.9184%" y="271.50">dec25`&lt;alloc::v..</text></g><g><title>dec25`core::slice::iter::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (59 samples, 0.78%)</title><rect x="29.2706%" y="245" width="0.7825%" height="15" fill="rgb(222,201,40)" fg:x="2207" fg:w="59"/><text x="29.5206%" y="255.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (1,527 samples, 20.25%)</title><rect x="10.1459%" y="293" width="20.2520%" height="15" fill="rgb(235,61,29)" fg:x="765" fg:w="1527"/><text x="10.3959%" y="303.50">dec25`core::hash::BuildHasher::h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.34%)</title><rect x="30.0531%" y="277" width="0.3448%" height="15" fill="rgb(219,207,3)" fg:x="2266" fg:w="26"/><text x="30.3031%" y="287.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.08%)</title><rect x="30.3979%" y="293" width="0.0796%" height="15" fill="rgb(222,56,46)" fg:x="2292" fg:w="6"/><text x="30.6479%" y="303.50"></text></g><g><title>dec25`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 1.11%)</title><rect x="30.9682%" y="277" width="1.1141%" height="15" fill="rgb(239,76,54)" fg:x="2335" fg:w="84"/><text x="31.2182%" y="287.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::vld1_u8 (25 samples, 0.33%)</title><rect x="32.0822%" y="277" width="0.3316%" height="15" fill="rgb(231,124,27)" fg:x="2419" fg:w="25"/><text x="32.3322%" y="287.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (16 samples, 0.21%)</title><rect x="32.4138%" y="277" width="0.2122%" height="15" fill="rgb(249,195,6)" fg:x="2444" fg:w="16"/><text x="32.6638%" y="287.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vceq_u8 (42 samples, 0.56%)</title><rect x="34.8276%" y="261" width="0.5570%" height="15" fill="rgb(237,174,47)" fg:x="2626" fg:w="42"/><text x="35.0776%" y="271.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (5 samples, 0.07%)</title><rect x="35.3846%" y="261" width="0.0663%" height="15" fill="rgb(206,201,31)" fg:x="2668" fg:w="5"/><text x="35.6346%" y="271.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::vdup_n_u8 (10 samples, 0.13%)</title><rect x="35.4509%" y="261" width="0.1326%" height="15" fill="rgb(231,57,52)" fg:x="2673" fg:w="10"/><text x="35.7009%" y="271.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::vget_lane_u64 (12 samples, 0.16%)</title><rect x="35.5836%" y="261" width="0.1592%" height="15" fill="rgb(248,177,22)" fg:x="2683" fg:w="12"/><text x="35.8336%" y="271.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (42 samples, 0.56%)</title><rect x="35.7427%" y="261" width="0.5570%" height="15" fill="rgb(215,211,37)" fg:x="2695" fg:w="42"/><text x="35.9927%" y="271.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.09%)</title><rect x="38.4615%" y="213" width="0.0928%" height="15" fill="rgb(241,128,51)" fg:x="2900" fg:w="7"/><text x="38.7115%" y="223.50"></text></g><g><title>dec25`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.05%)</title><rect x="40.0133%" y="181" width="0.0531%" height="15" fill="rgb(227,165,31)" fg:x="3017" fg:w="4"/><text x="40.2633%" y="191.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::cmp::PartialEq&gt;::eq (25 samples, 0.33%)</title><rect x="40.0663%" y="181" width="0.3316%" height="15" fill="rgb(228,167,24)" fg:x="3021" fg:w="25"/><text x="40.3163%" y="191.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.12%)</title><rect x="40.3979%" y="181" width="0.1194%" height="15" fill="rgb(228,143,12)" fg:x="3046" fg:w="9"/><text x="40.6479%" y="191.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::from_output (5 samples, 0.07%)</title><rect x="40.5172%" y="181" width="0.0663%" height="15" fill="rgb(249,149,8)" fg:x="3055" fg:w="5"/><text x="40.7672%" y="191.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::PartialEq for ()&gt;::eq (1 samples, 0.01%)</title><rect x="40.5836%" y="181" width="0.0133%" height="15" fill="rgb(243,35,44)" fg:x="3060" fg:w="1"/><text x="40.8336%" y="191.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (91 samples, 1.21%)</title><rect x="41.7109%" y="149" width="1.2069%" height="15" fill="rgb(246,89,9)" fg:x="3145" fg:w="91"/><text x="41.9609%" y="159.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 1.51%)</title><rect x="41.6180%" y="165" width="1.5119%" height="15" fill="rgb(233,213,13)" fg:x="3138" fg:w="114"/><text x="41.8680%" y="175.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (16 samples, 0.21%)</title><rect x="42.9178%" y="149" width="0.2122%" height="15" fill="rgb(233,141,41)" fg:x="3236" fg:w="16"/><text x="43.1678%" y="159.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (48 samples, 0.64%)</title><rect x="44.6684%" y="101" width="0.6366%" height="15" fill="rgb(239,167,4)" fg:x="3368" fg:w="48"/><text x="44.9184%" y="111.50"></text></g><g><title>dec25`DYLD-STUB$$memcmp (4 samples, 0.05%)</title><rect x="45.3050%" y="101" width="0.0531%" height="15" fill="rgb(209,217,16)" fg:x="3416" fg:w="4"/><text x="45.5550%" y="111.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::try_fold (389 samples, 5.16%)</title><rect x="40.5968%" y="181" width="5.1592%" height="15" fill="rgb(219,88,35)" fg:x="3061" fg:w="389"/><text x="40.8468%" y="191.50">dec25`..</text></g><g><title>dec25`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (198 samples, 2.63%)</title><rect x="43.1300%" y="165" width="2.6260%" height="15" fill="rgb(220,193,23)" fg:x="3252" fg:w="198"/><text x="43.3800%" y="175.50">de..</text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (174 samples, 2.31%)</title><rect x="43.4483%" y="149" width="2.3077%" height="15" fill="rgb(230,90,52)" fg:x="3276" fg:w="174"/><text x="43.6983%" y="159.50">d..</text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (130 samples, 1.72%)</title><rect x="44.0318%" y="133" width="1.7241%" height="15" fill="rgb(252,106,19)" fg:x="3320" fg:w="130"/><text x="44.2818%" y="143.50"></text></g><g><title>dec25`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (122 samples, 1.62%)</title><rect x="44.1379%" y="117" width="1.6180%" height="15" fill="rgb(206,74,20)" fg:x="3328" fg:w="122"/><text x="44.3879%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (30 samples, 0.40%)</title><rect x="45.3581%" y="101" width="0.3979%" height="15" fill="rgb(230,138,44)" fg:x="3420" fg:w="30"/><text x="45.6081%" y="111.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (28 samples, 0.37%)</title><rect x="47.4536%" y="133" width="0.3714%" height="15" fill="rgb(235,182,43)" fg:x="3578" fg:w="28"/><text x="47.7036%" y="143.50"></text></g><g><title>dec25`core::cmp::min_by (96 samples, 1.27%)</title><rect x="47.0159%" y="149" width="1.2732%" height="15" fill="rgb(242,16,51)" fg:x="3545" fg:w="96"/><text x="47.2659%" y="159.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (35 samples, 0.46%)</title><rect x="47.8249%" y="133" width="0.4642%" height="15" fill="rgb(248,9,4)" fg:x="3606" fg:w="35"/><text x="48.0749%" y="143.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (877 samples, 11.63%)</title><rect x="38.8462%" y="197" width="11.6313%" height="15" fill="rgb(210,31,22)" fg:x="2929" fg:w="877"/><text x="39.0962%" y="207.50">dec25`&lt;[A] as cor..</text></g><g><title>dec25`core::iter::traits::iterator::Iterator::zip (356 samples, 4.72%)</title><rect x="45.7560%" y="181" width="4.7215%" height="15" fill="rgb(239,54,39)" fg:x="3450" fg:w="356"/><text x="46.0060%" y="191.50">dec25`..</text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (308 samples, 4.08%)</title><rect x="46.3926%" y="165" width="4.0849%" height="15" fill="rgb(230,99,41)" fg:x="3498" fg:w="308"/><text x="46.6426%" y="175.50">dec2..</text></g><g><title>dec25`core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (165 samples, 2.19%)</title><rect x="48.2891%" y="149" width="2.1883%" height="15" fill="rgb(253,106,12)" fg:x="3641" fg:w="165"/><text x="48.5391%" y="159.50">d..</text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (146 samples, 1.94%)</title><rect x="48.5411%" y="133" width="1.9363%" height="15" fill="rgb(213,46,41)" fg:x="3660" fg:w="146"/><text x="48.7911%" y="143.50">d..</text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (203 samples, 2.69%)</title><rect x="50.4775%" y="197" width="2.6923%" height="15" fill="rgb(215,133,35)" fg:x="3806" fg:w="203"/><text x="50.7275%" y="207.50">de..</text></g><g><title>dec25`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,160 samples, 15.38%)</title><rect x="38.0769%" y="229" width="15.3846%" height="15" fill="rgb(213,28,5)" fg:x="2871" fg:w="1160"/><text x="38.3269%" y="239.50">dec25`&lt;Q as hashbrown::E..</text></g><g><title>dec25`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,124 samples, 14.91%)</title><rect x="38.5544%" y="213" width="14.9072%" height="15" fill="rgb(215,77,49)" fg:x="2907" fg:w="1124"/><text x="38.8044%" y="223.50">dec25`alloc::vec::parti..</text></g><g><title>dec25`&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (22 samples, 0.29%)</title><rect x="53.1698%" y="197" width="0.2918%" height="15" fill="rgb(248,100,22)" fg:x="4009" fg:w="22"/><text x="53.4198%" y="207.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,305 samples, 17.31%)</title><rect x="36.2997%" y="261" width="17.3077%" height="15" fill="rgb(208,67,9)" fg:x="2737" fg:w="1305"/><text x="36.5497%" y="271.50">dec25`hashbrown::raw::RawTa..</text></g><g><title>dec25`hashbrown::map::equivalent_key::_{{closure}} (1,190 samples, 15.78%)</title><rect x="37.8249%" y="245" width="15.7825%" height="15" fill="rgb(219,133,21)" fg:x="2852" fg:w="1190"/><text x="38.0749%" y="255.50">dec25`hashbrown::map::eq..</text></g><g><title>dec25`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (11 samples, 0.15%)</title><rect x="53.4615%" y="229" width="0.1459%" height="15" fill="rgb(246,46,29)" fg:x="4031" fg:w="11"/><text x="53.7115%" y="239.50"></text></g><g><title>dec25`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,349 samples, 44.42%)</title><rect x="9.7347%" y="325" width="44.4164%" height="15" fill="rgb(246,185,52)" fg:x="734" fg:w="3349"/><text x="9.9847%" y="335.50">dec25`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>dec25`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,339 samples, 44.28%)</title><rect x="9.8674%" y="309" width="44.2838%" height="15" fill="rgb(252,136,11)" fg:x="744" fg:w="3339"/><text x="10.1174%" y="319.50">dec25`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::get (1,785 samples, 23.67%)</title><rect x="30.4775%" y="293" width="23.6737%" height="15" fill="rgb(219,138,53)" fg:x="2298" fg:w="1785"/><text x="30.7275%" y="303.50">dec25`hashbrown::raw::RawTable&lt;T,A&gt;::g..</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find (1,623 samples, 21.53%)</title><rect x="32.6260%" y="277" width="21.5252%" height="15" fill="rgb(211,51,23)" fg:x="2460" fg:w="1623"/><text x="32.8760%" y="287.50">dec25`hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>dec25`hashbrown::raw::neon::Group::match_byte (41 samples, 0.54%)</title><rect x="53.6074%" y="261" width="0.5438%" height="15" fill="rgb(247,221,28)" fg:x="4042" fg:w="41"/><text x="53.8574%" y="271.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="54.1910%" y="309" width="0.0133%" height="15" fill="rgb(251,222,45)" fg:x="4086" fg:w="1"/><text x="54.4410%" y="319.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.05%)</title><rect x="54.4562%" y="293" width="0.0531%" height="15" fill="rgb(217,162,53)" fg:x="4106" fg:w="4"/><text x="54.7062%" y="303.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.03%)</title><rect x="54.6817%" y="277" width="0.0265%" height="15" fill="rgb(229,93,14)" fg:x="4123" fg:w="2"/><text x="54.9317%" y="287.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.31%)</title><rect x="54.7480%" y="261" width="0.3050%" height="15" fill="rgb(209,67,49)" fg:x="4128" fg:w="23"/><text x="54.9980%" y="271.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (138 samples, 1.83%)</title><rect x="55.0531%" y="261" width="1.8302%" height="15" fill="rgb(213,87,29)" fg:x="4151" fg:w="138"/><text x="55.3031%" y="271.50">d..</text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (531 samples, 7.04%)</title><rect x="54.7082%" y="277" width="7.0424%" height="15" fill="rgb(205,151,52)" fg:x="4125" fg:w="531"/><text x="54.9582%" y="287.50">dec25`&lt;st..</text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (367 samples, 4.87%)</title><rect x="56.8833%" y="261" width="4.8674%" height="15" fill="rgb(253,215,39)" fg:x="4289" fg:w="367"/><text x="57.1333%" y="271.50">dec25`..</text></g><g><title>dec25`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (62 samples, 0.82%)</title><rect x="61.7507%" y="277" width="0.8223%" height="15" fill="rgb(221,220,41)" fg:x="4656" fg:w="62"/><text x="62.0007%" y="287.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (6 samples, 0.08%)</title><rect x="62.5729%" y="277" width="0.0796%" height="15" fill="rgb(218,133,21)" fg:x="4718" fg:w="6"/><text x="62.8229%" y="287.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 1.21%)</title><rect x="63.9523%" y="229" width="1.2069%" height="15" fill="rgb(221,193,43)" fg:x="4822" fg:w="91"/><text x="64.2023%" y="239.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.29%)</title><rect x="68.1963%" y="133" width="0.2918%" height="15" fill="rgb(240,128,52)" fg:x="5142" fg:w="22"/><text x="68.4463%" y="143.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (172 samples, 2.28%)</title><rect x="66.4058%" y="165" width="2.2812%" height="15" fill="rgb(253,114,12)" fg:x="5007" fg:w="172"/><text x="66.6558%" y="175.50">d..</text></g><g><title>dec25`core::cmp::min_by (82 samples, 1.09%)</title><rect x="67.5995%" y="149" width="1.0875%" height="15" fill="rgb(215,223,47)" fg:x="5097" fg:w="82"/><text x="67.8495%" y="159.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (15 samples, 0.20%)</title><rect x="68.4881%" y="133" width="0.1989%" height="15" fill="rgb(248,225,23)" fg:x="5164" fg:w="15"/><text x="68.7381%" y="143.50"></text></g><g><title>dec25`core::hash::Hash::hash_slice (355 samples, 4.71%)</title><rect x="65.1592%" y="229" width="4.7082%" height="15" fill="rgb(250,108,0)" fg:x="4913" fg:w="355"/><text x="65.4092%" y="239.50">dec25..</text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (300 samples, 3.98%)</title><rect x="65.8886%" y="213" width="3.9788%" height="15" fill="rgb(228,208,7)" fg:x="4968" fg:w="300"/><text x="66.1386%" y="223.50">dec2..</text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (290 samples, 3.85%)</title><rect x="66.0212%" y="197" width="3.8462%" height="15" fill="rgb(244,45,10)" fg:x="4978" fg:w="290"/><text x="66.2712%" y="207.50">dec2..</text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (276 samples, 3.66%)</title><rect x="66.2069%" y="181" width="3.6605%" height="15" fill="rgb(207,125,25)" fg:x="4992" fg:w="276"/><text x="66.4569%" y="191.50">dec2..</text></g><g><title>dec25`core::hash::sip::u8to64_le (89 samples, 1.18%)</title><rect x="68.6870%" y="165" width="1.1804%" height="15" fill="rgb(210,195,18)" fg:x="5179" fg:w="89"/><text x="68.9370%" y="175.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 samples, 1.03%)</title><rect x="70.2255%" y="181" width="1.0345%" height="15" fill="rgb(249,80,12)" fg:x="5295" fg:w="78"/><text x="70.4755%" y="191.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (96 samples, 1.27%)</title><rect x="71.2599%" y="181" width="1.2732%" height="15" fill="rgb(221,65,9)" fg:x="5373" fg:w="96"/><text x="71.5099%" y="191.50"></text></g><g><title>dec25`core::hash::Hasher::write_length_prefix (226 samples, 3.00%)</title><rect x="69.8674%" y="229" width="2.9973%" height="15" fill="rgb(235,49,36)" fg:x="5268" fg:w="226"/><text x="70.1174%" y="239.50">dec..</text></g><g><title>dec25`core::hash::Hasher::write_usize (214 samples, 2.84%)</title><rect x="70.0265%" y="213" width="2.8382%" height="15" fill="rgb(225,32,20)" fg:x="5280" fg:w="214"/><text x="70.2765%" y="223.50">de..</text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (205 samples, 2.72%)</title><rect x="70.1459%" y="197" width="2.7188%" height="15" fill="rgb(215,141,46)" fg:x="5289" fg:w="205"/><text x="70.3959%" y="207.50">de..</text></g><g><title>dec25`core::hash::sip::u8to64_le (25 samples, 0.33%)</title><rect x="72.5332%" y="181" width="0.3316%" height="15" fill="rgb(250,160,47)" fg:x="5469" fg:w="25"/><text x="72.7832%" y="191.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (811 samples, 10.76%)</title><rect x="62.6525%" y="277" width="10.7560%" height="15" fill="rgb(216,222,40)" fg:x="4724" fg:w="811"/><text x="62.9025%" y="287.50">dec25`core::hash..</text></g><g><title>dec25`&lt;dec25::Node as core::hash::Hash&gt;::hash (805 samples, 10.68%)</title><rect x="62.7321%" y="261" width="10.6764%" height="15" fill="rgb(234,217,39)" fg:x="4730" fg:w="805"/><text x="62.9821%" y="271.50">dec25`&lt;dec25::No..</text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (795 samples, 10.54%)</title><rect x="62.8647%" y="245" width="10.5438%" height="15" fill="rgb(207,178,40)" fg:x="4740" fg:w="795"/><text x="63.1147%" y="255.50">dec25`&lt;alloc::v..</text></g><g><title>dec25`core::slice::iter::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (41 samples, 0.54%)</title><rect x="72.8647%" y="229" width="0.5438%" height="15" fill="rgb(221,136,13)" fg:x="5494" fg:w="41"/><text x="73.1147%" y="239.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (1,452 samples, 19.26%)</title><rect x="54.5093%" y="293" width="19.2573%" height="15" fill="rgb(249,199,10)" fg:x="4110" fg:w="1452"/><text x="54.7593%" y="303.50">dec25`core::hash::BuildHasher:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.36%)</title><rect x="73.4085%" y="277" width="0.3581%" height="15" fill="rgb(249,222,13)" fg:x="5535" fg:w="27"/><text x="73.6585%" y="287.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.07%)</title><rect x="73.7666%" y="293" width="0.0663%" height="15" fill="rgb(244,185,38)" fg:x="5562" fg:w="5"/><text x="74.0166%" y="303.50"></text></g><g><title>dec25`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.99%)</title><rect x="74.2971%" y="277" width="0.9947%" height="15" fill="rgb(236,202,9)" fg:x="5602" fg:w="75"/><text x="74.5471%" y="287.50"></text></g><g><title>dec25`core::core_arch::aarch64::neon::vld1_u8 (22 samples, 0.29%)</title><rect x="75.2918%" y="277" width="0.2918%" height="15" fill="rgb(250,229,37)" fg:x="5677" fg:w="22"/><text x="75.5418%" y="287.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (21 samples, 0.28%)</title><rect x="75.5836%" y="277" width="0.2785%" height="15" fill="rgb(206,174,23)" fg:x="5699" fg:w="21"/><text x="75.8336%" y="287.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vceq_u8 (38 samples, 0.50%)</title><rect x="78.1565%" y="261" width="0.5040%" height="15" fill="rgb(211,33,43)" fg:x="5893" fg:w="38"/><text x="78.4065%" y="271.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.08%)</title><rect x="78.6605%" y="261" width="0.0796%" height="15" fill="rgb(245,58,50)" fg:x="5931" fg:w="6"/><text x="78.9105%" y="271.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::vdup_n_u8 (12 samples, 0.16%)</title><rect x="78.7401%" y="261" width="0.1592%" height="15" fill="rgb(244,68,36)" fg:x="5937" fg:w="12"/><text x="78.9901%" y="271.50"></text></g><g><title>dec25`core::core_arch::arm_shared::neon::vget_lane_u64 (11 samples, 0.15%)</title><rect x="78.8992%" y="261" width="0.1459%" height="15" fill="rgb(232,229,15)" fg:x="5949" fg:w="11"/><text x="79.1492%" y="271.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (37 samples, 0.49%)</title><rect x="79.0451%" y="261" width="0.4907%" height="15" fill="rgb(254,30,23)" fg:x="5960" fg:w="37"/><text x="79.2951%" y="271.50"></text></g><g><title>dec25`&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (13 samples, 0.17%)</title><rect x="80.6366%" y="229" width="0.1724%" height="15" fill="rgb(235,160,14)" fg:x="6080" fg:w="13"/><text x="80.8866%" y="239.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.08%)</title><rect x="81.3263%" y="197" width="0.0796%" height="15" fill="rgb(212,155,44)" fg:x="6132" fg:w="6"/><text x="81.5763%" y="207.50"></text></g><g><title>dec25`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (6 samples, 0.08%)</title><rect x="82.9708%" y="165" width="0.0796%" height="15" fill="rgb(226,2,50)" fg:x="6256" fg:w="6"/><text x="83.2208%" y="175.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::cmp::PartialEq&gt;::eq (20 samples, 0.27%)</title><rect x="83.0504%" y="165" width="0.2653%" height="15" fill="rgb(234,177,6)" fg:x="6262" fg:w="20"/><text x="83.3004%" y="175.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.09%)</title><rect x="83.3156%" y="165" width="0.0928%" height="15" fill="rgb(217,24,9)" fg:x="6282" fg:w="7"/><text x="83.5656%" y="175.50"></text></g><g><title>dec25`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::from_output (2 samples, 0.03%)</title><rect x="83.4085%" y="165" width="0.0265%" height="15" fill="rgb(220,13,46)" fg:x="6289" fg:w="2"/><text x="83.6585%" y="175.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::PartialEq for ()&gt;::eq (1 samples, 0.01%)</title><rect x="83.4350%" y="165" width="0.0133%" height="15" fill="rgb(239,221,27)" fg:x="6291" fg:w="1"/><text x="83.6850%" y="175.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (86 samples, 1.14%)</title><rect x="84.4695%" y="133" width="1.1406%" height="15" fill="rgb(222,198,25)" fg:x="6369" fg:w="86"/><text x="84.7195%" y="143.50"></text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 1.50%)</title><rect x="84.2706%" y="149" width="1.4987%" height="15" fill="rgb(211,99,13)" fg:x="6354" fg:w="113"/><text x="84.5206%" y="159.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (12 samples, 0.16%)</title><rect x="85.6101%" y="133" width="0.1592%" height="15" fill="rgb(232,111,31)" fg:x="6455" fg:w="12"/><text x="85.8601%" y="143.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (59 samples, 0.78%)</title><rect x="87.4536%" y="85" width="0.7825%" height="15" fill="rgb(245,82,37)" fg:x="6594" fg:w="59"/><text x="87.7036%" y="95.50"></text></g><g><title>dec25`DYLD-STUB$$memcmp (6 samples, 0.08%)</title><rect x="88.2361%" y="85" width="0.0796%" height="15" fill="rgb(227,149,46)" fg:x="6653" fg:w="6"/><text x="88.4861%" y="95.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::try_fold (402 samples, 5.33%)</title><rect x="83.4483%" y="165" width="5.3316%" height="15" fill="rgb(218,36,50)" fg:x="6292" fg:w="402"/><text x="83.6983%" y="175.50">dec25`c..</text></g><g><title>dec25`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (227 samples, 3.01%)</title><rect x="85.7692%" y="149" width="3.0106%" height="15" fill="rgb(226,80,48)" fg:x="6467" fg:w="227"/><text x="86.0192%" y="159.50">dec..</text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (203 samples, 2.69%)</title><rect x="86.0875%" y="133" width="2.6923%" height="15" fill="rgb(238,224,15)" fg:x="6491" fg:w="203"/><text x="86.3375%" y="143.50">de..</text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (160 samples, 2.12%)</title><rect x="86.6578%" y="117" width="2.1220%" height="15" fill="rgb(241,136,10)" fg:x="6534" fg:w="160"/><text x="86.9078%" y="127.50">d..</text></g><g><title>dec25`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (147 samples, 1.95%)</title><rect x="86.8302%" y="101" width="1.9496%" height="15" fill="rgb(208,32,45)" fg:x="6547" fg:w="147"/><text x="87.0802%" y="111.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (35 samples, 0.46%)</title><rect x="88.3156%" y="85" width="0.4642%" height="15" fill="rgb(207,135,9)" fg:x="6659" fg:w="35"/><text x="88.5656%" y="95.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (26 samples, 0.34%)</title><rect x="90.3183%" y="117" width="0.3448%" height="15" fill="rgb(206,86,44)" fg:x="6810" fg:w="26"/><text x="90.5683%" y="127.50"></text></g><g><title>dec25`core::cmp::min_by (71 samples, 0.94%)</title><rect x="89.8806%" y="133" width="0.9416%" height="15" fill="rgb(245,177,15)" fg:x="6777" fg:w="71"/><text x="90.1306%" y="143.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (12 samples, 0.16%)</title><rect x="90.6631%" y="117" width="0.1592%" height="15" fill="rgb(206,64,50)" fg:x="6836" fg:w="12"/><text x="90.9131%" y="127.50"></text></g><g><title>dec25`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (817 samples, 10.84%)</title><rect x="81.7241%" y="181" width="10.8355%" height="15" fill="rgb(234,36,40)" fg:x="6162" fg:w="817"/><text x="81.9741%" y="191.50">dec25`&lt;[A] as co..</text></g><g><title>dec25`core::iter::traits::iterator::Iterator::zip (285 samples, 3.78%)</title><rect x="88.7798%" y="165" width="3.7798%" height="15" fill="rgb(213,64,8)" fg:x="6694" fg:w="285"/><text x="89.0298%" y="175.50">dec2..</text></g><g><title>dec25`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (230 samples, 3.05%)</title><rect x="89.5093%" y="149" width="3.0504%" height="15" fill="rgb(210,75,36)" fg:x="6749" fg:w="230"/><text x="89.7593%" y="159.50">dec..</text></g><g><title>dec25`core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (131 samples, 1.74%)</title><rect x="90.8223%" y="133" width="1.7374%" height="15" fill="rgb(229,88,21)" fg:x="6848" fg:w="131"/><text x="91.0723%" y="143.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (113 samples, 1.50%)</title><rect x="91.0610%" y="117" width="1.4987%" height="15" fill="rgb(252,204,47)" fg:x="6866" fg:w="113"/><text x="91.3110%" y="127.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (177 samples, 2.35%)</title><rect x="92.5597%" y="181" width="2.3475%" height="15" fill="rgb(208,77,27)" fg:x="6979" fg:w="177"/><text x="92.8097%" y="191.50">d..</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,178 samples, 15.62%)</title><rect x="79.5358%" y="261" width="15.6233%" height="15" fill="rgb(221,76,26)" fg:x="5997" fg:w="1178"/><text x="79.7858%" y="271.50">dec25`hashbrown::raw::Ra..</text></g><g><title>dec25`hashbrown::map::equivalent_key::_{{closure}} (1,104 samples, 14.64%)</title><rect x="80.5172%" y="245" width="14.6419%" height="15" fill="rgb(225,139,18)" fg:x="6071" fg:w="1104"/><text x="80.7672%" y="255.50">dec25`hashbrown::map::..</text></g><g><title>dec25`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,082 samples, 14.35%)</title><rect x="80.8090%" y="229" width="14.3501%" height="15" fill="rgb(230,137,11)" fg:x="6093" fg:w="1082"/><text x="81.0590%" y="239.50">dec25`&lt;Q as hashbrown:..</text></g><g><title>dec25`&lt;dec25::Node as core::cmp::PartialEq&gt;::eq (1,060 samples, 14.06%)</title><rect x="81.1008%" y="213" width="14.0584%" height="15" fill="rgb(212,28,1)" fg:x="6115" fg:w="1060"/><text x="81.3508%" y="223.50">dec25`&lt;dec25::Node as..</text></g><g><title>dec25`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,037 samples, 13.75%)</title><rect x="81.4058%" y="197" width="13.7533%" height="15" fill="rgb(248,164,17)" fg:x="6138" fg:w="1037"/><text x="81.6558%" y="207.50">dec25`alloc::vec::par..</text></g><g><title>dec25`&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.25%)</title><rect x="94.9072%" y="181" width="0.2520%" height="15" fill="rgb(222,171,42)" fg:x="7156" fg:w="19"/><text x="95.1572%" y="191.50"></text></g><g><title>dec25`dec25::find_cut_and_reduce::_{{closure}} (6,982 samples, 92.60%)</title><rect x="3.4483%" y="341" width="92.5995%" height="15" fill="rgb(243,84,45)" fg:x="260" fg:w="6982"/><text x="3.6983%" y="351.50">dec25`dec25::find_cut_and_reduce::_{{closure}}</text></g><g><title>dec25`std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3,159 samples, 41.90%)</title><rect x="54.1512%" y="325" width="41.8966%" height="15" fill="rgb(252,49,23)" fg:x="4083" fg:w="3159"/><text x="54.4012%" y="335.50">dec25`std::collections::hash::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>dec25`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,155 samples, 41.84%)</title><rect x="54.2042%" y="309" width="41.8435%" height="15" fill="rgb(215,19,7)" fg:x="4087" fg:w="3155"/><text x="54.4542%" y="319.50">dec25`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::get (1,675 samples, 22.21%)</title><rect x="73.8329%" y="293" width="22.2149%" height="15" fill="rgb(238,81,41)" fg:x="5567" fg:w="1675"/><text x="74.0829%" y="303.50">dec25`hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find (1,522 samples, 20.19%)</title><rect x="75.8621%" y="277" width="20.1857%" height="15" fill="rgb(210,199,37)" fg:x="5720" fg:w="1522"/><text x="76.1121%" y="287.50">dec25`hashbrown::raw::RawTable&lt;T..</text></g><g><title>dec25`hashbrown::raw::neon::Group::match_byte (67 samples, 0.89%)</title><rect x="95.1592%" y="261" width="0.8886%" height="15" fill="rgb(244,192,49)" fg:x="7175" fg:w="67"/><text x="95.4092%" y="271.50"></text></g><g><title>dec25`std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.01%)</title><rect x="96.0477%" y="341" width="0.0133%" height="15" fill="rgb(226,211,11)" fg:x="7242" fg:w="1"/><text x="96.2977%" y="351.50"></text></g><g><title>dec25`core::iter::adapters::filter::filter_fold::_{{closure}} (7,022 samples, 93.13%)</title><rect x="2.9576%" y="357" width="93.1300%" height="15" fill="rgb(236,162,54)" fg:x="223" fg:w="7022"/><text x="3.2076%" y="367.50">dec25`core::iter::adapters::filter::filter_fold::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="96.0610%" y="341" width="0.0265%" height="15" fill="rgb(220,229,9)" fg:x="7243" fg:w="2"/><text x="96.3110%" y="351.50"></text></g><g><title>dec25`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7,090 samples, 94.03%)</title><rect x="2.5995%" y="373" width="94.0318%" height="15" fill="rgb(250,87,22)" fg:x="196" fg:w="7090"/><text x="2.8495%" y="383.50">dec25`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.54%)</title><rect x="96.0875%" y="357" width="0.5438%" height="15" fill="rgb(239,43,17)" fg:x="7245" fg:w="41"/><text x="96.3375%" y="367.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,188 samples, 95.33%)</title><rect x="1.6578%" y="389" width="95.3316%" height="15" fill="rgb(231,177,25)" fg:x="125" fg:w="7188"/><text x="1.9078%" y="399.50">dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.36%)</title><rect x="96.6313%" y="373" width="0.3581%" height="15" fill="rgb(219,179,1)" fg:x="7286" fg:w="27"/><text x="96.8813%" y="383.50"></text></g><g><title>dec25`DYLD-STUB$$memcpy (14 samples, 0.19%)</title><rect x="96.9894%" y="389" width="0.1857%" height="15" fill="rgb(238,219,53)" fg:x="7313" fg:w="14"/><text x="97.2394%" y="399.50"></text></g><g><title>dec25`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (7,313 samples, 96.99%)</title><rect x="1.6446%" y="405" width="96.9894%" height="15" fill="rgb(232,167,36)" fg:x="124" fg:w="7313"/><text x="1.8946%" y="415.50">dec25`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (110 samples, 1.46%)</title><rect x="97.1751%" y="389" width="1.4589%" height="15" fill="rgb(244,19,51)" fg:x="7327" fg:w="110"/><text x="97.4251%" y="399.50"></text></g><g><title>dec25`core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}} (7,320 samples, 97.08%)</title><rect x="1.5650%" y="421" width="97.0822%" height="15" fill="rgb(224,6,22)" fg:x="118" fg:w="7320"/><text x="1.8150%" y="431.50">dec25`core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}}</text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="98.6340%" y="405" width="0.0133%" height="15" fill="rgb(224,145,5)" fg:x="7437" fg:w="1"/><text x="98.8840%" y="415.50"></text></g><g><title>dec25`core::iter::adapters::map::map_fold::_{{closure}} (7,347 samples, 97.44%)</title><rect x="1.3395%" y="437" width="97.4403%" height="15" fill="rgb(234,130,49)" fg:x="101" fg:w="7347"/><text x="1.5895%" y="447.50">dec25`core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.13%)</title><rect x="98.6472%" y="421" width="0.1326%" height="15" fill="rgb(254,6,2)" fg:x="7438" fg:w="10"/><text x="98.8972%" y="431.50"></text></g><g><title>dec25`dec25::find_cut_and_reduce::_{{closure}} (1 samples, 0.01%)</title><rect x="98.7798%" y="437" width="0.0133%" height="15" fill="rgb(208,96,46)" fg:x="7448" fg:w="1"/><text x="99.0298%" y="447.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::fold (7,444 samples, 98.73%)</title><rect x="0.1592%" y="453" width="98.7268%" height="15" fill="rgb(239,3,39)" fg:x="12" fg:w="7444"/><text x="0.4092%" y="463.50">dec25`core::iter::traits::iterator::Iterator::fold</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.09%)</title><rect x="98.7931%" y="437" width="0.0928%" height="15" fill="rgb(233,210,1)" fg:x="7449" fg:w="7"/><text x="99.0431%" y="447.50"></text></g><g><title>dec25`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,477 samples, 99.16%)</title><rect x="0.1061%" y="549" width="99.1645%" height="15" fill="rgb(244,137,37)" fg:x="8" fg:w="7477"/><text x="0.3561%" y="559.50">dec25`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>dec25`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,477 samples, 99.16%)</title><rect x="0.1061%" y="533" width="99.1645%" height="15" fill="rgb(240,136,2)" fg:x="8" fg:w="7477"/><text x="0.3561%" y="543.50">dec25`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>dec25`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,477 samples, 99.16%)</title><rect x="0.1061%" y="517" width="99.1645%" height="15" fill="rgb(239,18,37)" fg:x="8" fg:w="7477"/><text x="0.3561%" y="527.50">dec25`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>dec25`core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (7,477 samples, 99.16%)</title><rect x="0.1061%" y="501" width="99.1645%" height="15" fill="rgb(218,185,22)" fg:x="8" fg:w="7477"/><text x="0.3561%" y="511.50">dec25`core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold</text></g><g><title>dec25`&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,477 samples, 99.16%)</title><rect x="0.1061%" y="485" width="99.1645%" height="15" fill="rgb(225,218,4)" fg:x="8" fg:w="7477"/><text x="0.3561%" y="495.50">dec25`&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>dec25`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,477 samples, 99.16%)</title><rect x="0.1061%" y="469" width="99.1645%" height="15" fill="rgb(230,182,32)" fg:x="8" fg:w="7477"/><text x="0.3561%" y="479.50">dec25`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.38%)</title><rect x="98.8859%" y="453" width="0.3846%" height="15" fill="rgb(242,56,43)" fg:x="7456" fg:w="29"/><text x="99.1359%" y="463.50"></text></g><g><title>dec25`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="99.2706%" y="469" width="0.0133%" height="15" fill="rgb(233,99,24)" fg:x="7485" fg:w="1"/><text x="99.5206%" y="479.50"></text></g><g><title>dec25`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.2706%" y="453" width="0.0133%" height="15" fill="rgb(234,209,42)" fg:x="7485" fg:w="1"/><text x="99.5206%" y="463.50"></text></g><g><title>dec25`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.2706%" y="437" width="0.0133%" height="15" fill="rgb(227,7,12)" fg:x="7485" fg:w="1"/><text x="99.5206%" y="447.50"></text></g><g><title>dec25`core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.01%)</title><rect x="99.2706%" y="421" width="0.0133%" height="15" fill="rgb(245,203,43)" fg:x="7485" fg:w="1"/><text x="99.5206%" y="431.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::collect (2 samples, 0.03%)</title><rect x="99.2706%" y="549" width="0.0265%" height="15" fill="rgb(238,205,33)" fg:x="7485" fg:w="2"/><text x="99.5206%" y="559.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="99.2706%" y="533" width="0.0265%" height="15" fill="rgb(231,56,7)" fg:x="7485" fg:w="2"/><text x="99.5206%" y="543.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="99.2706%" y="517" width="0.0265%" height="15" fill="rgb(244,186,29)" fg:x="7485" fg:w="2"/><text x="99.5206%" y="527.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="99.2706%" y="501" width="0.0265%" height="15" fill="rgb(234,111,31)" fg:x="7485" fg:w="2"/><text x="99.5206%" y="511.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="99.2706%" y="485" width="0.0265%" height="15" fill="rgb(241,149,10)" fg:x="7485" fg:w="2"/><text x="99.5206%" y="495.50"></text></g><g><title>dec25`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="99.2838%" y="469" width="0.0133%" height="15" fill="rgb(249,206,44)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="479.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="99.2838%" y="453" width="0.0133%" height="15" fill="rgb(251,153,30)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="463.50"></text></g><g><title>dec25`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.2838%" y="437" width="0.0133%" height="15" fill="rgb(239,152,38)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="447.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.2838%" y="421" width="0.0133%" height="15" fill="rgb(249,139,47)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="431.50"></text></g><g><title>dec25`core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="99.2838%" y="405" width="0.0133%" height="15" fill="rgb(244,64,35)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="415.50"></text></g><g><title>dec25`dec25::find_cut_and_reduce::_{{closure}} (1 samples, 0.01%)</title><rect x="99.2838%" y="389" width="0.0133%" height="15" fill="rgb(216,46,15)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="399.50"></text></g><g><title>dec25`&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.01%)</title><rect x="99.2838%" y="373" width="0.0133%" height="15" fill="rgb(250,74,19)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="383.50"></text></g><g><title>dec25`&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.01%)</title><rect x="99.2838%" y="357" width="0.0133%" height="15" fill="rgb(249,42,33)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="367.50"></text></g><g><title>dec25`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="99.2838%" y="341" width="0.0133%" height="15" fill="rgb(242,149,17)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="351.50"></text></g><g><title>dec25`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.01%)</title><rect x="99.2838%" y="325" width="0.0133%" height="15" fill="rgb(244,29,21)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="335.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="99.2838%" y="309" width="0.0133%" height="15" fill="rgb(220,130,37)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="319.50"></text></g><g><title>dec25`alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="99.2838%" y="293" width="0.0133%" height="15" fill="rgb(211,67,2)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="303.50"></text></g><g><title>dec25`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="99.2838%" y="277" width="0.0133%" height="15" fill="rgb(235,68,52)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="287.50"></text></g><g><title>dec25`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="99.2838%" y="261" width="0.0133%" height="15" fill="rgb(246,142,3)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="271.50"></text></g><g><title>dec25`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="99.2838%" y="245" width="0.0133%" height="15" fill="rgb(241,25,7)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="255.50"></text></g><g><title>dec25`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="99.2838%" y="229" width="0.0133%" height="15" fill="rgb(242,119,39)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="239.50"></text></g><g><title>dec25`alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="99.2838%" y="213" width="0.0133%" height="15" fill="rgb(241,98,45)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="99.2838%" y="197" width="0.0133%" height="15" fill="rgb(254,28,30)" fg:x="7486" fg:w="1"/><text x="99.5338%" y="207.50"></text></g><g><title>dec25`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.3634%" y="469" width="0.0133%" height="15" fill="rgb(241,142,54)" fg:x="7492" fg:w="1"/><text x="99.6134%" y="479.50"></text></g><g><title>dec25`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="99.4430%" y="421" width="0.0531%" height="15" fill="rgb(222,85,15)" fg:x="7498" fg:w="4"/><text x="99.6930%" y="431.50"></text></g><g><title>dec25`hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="99.4960%" y="421" width="0.0133%" height="15" fill="rgb(210,85,47)" fg:x="7502" fg:w="1"/><text x="99.7460%" y="431.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.15%)</title><rect x="99.3767%" y="469" width="0.1459%" height="15" fill="rgb(224,206,25)" fg:x="7493" fg:w="11"/><text x="99.6267%" y="479.50"></text></g><g><title>dec25`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.15%)</title><rect x="99.3767%" y="453" width="0.1459%" height="15" fill="rgb(243,201,19)" fg:x="7493" fg:w="11"/><text x="99.6267%" y="463.50"></text></g><g><title>dec25`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.11%)</title><rect x="99.4164%" y="437" width="0.1061%" height="15" fill="rgb(236,59,4)" fg:x="7496" fg:w="8"/><text x="99.6664%" y="447.50"></text></g><g><title>dec25`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="99.5093%" y="421" width="0.0133%" height="15" fill="rgb(254,179,45)" fg:x="7503" fg:w="1"/><text x="99.7593%" y="431.50"></text></g><g><title>dec25`core::cmp::max_by (1 samples, 0.01%)</title><rect x="99.6286%" y="453" width="0.0133%" height="15" fill="rgb(226,14,10)" fg:x="7512" fg:w="1"/><text x="99.8786%" y="463.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (7 samples, 0.09%)</title><rect x="99.6419%" y="453" width="0.0928%" height="15" fill="rgb(244,27,41)" fg:x="7513" fg:w="7"/><text x="99.8919%" y="463.50"></text></g><g><title>dec25`core::cmp::max_by (6 samples, 0.08%)</title><rect x="99.6552%" y="437" width="0.0796%" height="15" fill="rgb(235,35,32)" fg:x="7514" fg:w="6"/><text x="99.9052%" y="447.50"></text></g><g><title>dec25`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.05%)</title><rect x="99.6817%" y="421" width="0.0531%" height="15" fill="rgb(218,68,31)" fg:x="7516" fg:w="4"/><text x="99.9317%" y="431.50"></text></g><g><title>dec25`core::ops::function::FnMut::call_mut (2 samples, 0.03%)</title><rect x="99.7082%" y="405" width="0.0265%" height="15" fill="rgb(207,120,37)" fg:x="7518" fg:w="2"/><text x="99.9582%" y="415.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::max_by_key::compare (1 samples, 0.01%)</title><rect x="99.7215%" y="389" width="0.0133%" height="15" fill="rgb(227,98,0)" fg:x="7519" fg:w="1"/><text x="99.9715%" y="399.50"></text></g><g><title>dec25`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.01%)</title><rect x="99.7215%" y="373" width="0.0133%" height="15" fill="rgb(207,7,3)" fg:x="7519" fg:w="1"/><text x="99.9715%" y="383.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::max_by_key (34 samples, 0.45%)</title><rect x="99.2971%" y="549" width="0.4509%" height="15" fill="rgb(206,98,19)" fg:x="7487" fg:w="34"/><text x="99.5471%" y="559.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::max_by (34 samples, 0.45%)</title><rect x="99.2971%" y="533" width="0.4509%" height="15" fill="rgb(217,5,26)" fg:x="7487" fg:w="34"/><text x="99.5471%" y="543.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::reduce (34 samples, 0.45%)</title><rect x="99.2971%" y="517" width="0.4509%" height="15" fill="rgb(235,190,38)" fg:x="7487" fg:w="34"/><text x="99.5471%" y="527.50"></text></g><g><title>dec25`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.45%)</title><rect x="99.2971%" y="501" width="0.4509%" height="15" fill="rgb(247,86,24)" fg:x="7487" fg:w="34"/><text x="99.5471%" y="511.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::fold (34 samples, 0.45%)</title><rect x="99.2971%" y="485" width="0.4509%" height="15" fill="rgb(205,101,16)" fg:x="7487" fg:w="34"/><text x="99.5471%" y="495.50"></text></g><g><title>dec25`core::iter::adapters::map::map_fold::_{{closure}} (17 samples, 0.23%)</title><rect x="99.5225%" y="469" width="0.2255%" height="15" fill="rgb(246,168,33)" fg:x="7504" fg:w="17"/><text x="99.7725%" y="479.50"></text></g><g><title>dec25`dec25::find_cut_and_reduce::_{{closure}} (1 samples, 0.01%)</title><rect x="99.7347%" y="453" width="0.0133%" height="15" fill="rgb(231,114,1)" fg:x="7520" fg:w="1"/><text x="99.9847%" y="463.50"></text></g><g><title>dec25`core::iter::traits::iterator::Iterator::sum (1 samples, 0.01%)</title><rect x="99.7480%" y="549" width="0.0133%" height="15" fill="rgb(207,184,53)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="559.50"></text></g><g><title>dec25`&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.01%)</title><rect x="99.7480%" y="533" width="0.0133%" height="15" fill="rgb(224,95,51)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="543.50"></text></g><g><title>dec25`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.7480%" y="517" width="0.0133%" height="15" fill="rgb(212,188,45)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="527.50"></text></g><g><title>dec25`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.7480%" y="501" width="0.0133%" height="15" fill="rgb(223,154,38)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="511.50"></text></g><g><title>dec25`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.7480%" y="485" width="0.0133%" height="15" fill="rgb(251,22,52)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="495.50"></text></g><g><title>dec25`core::iter::adapters::filter::filter_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="99.7480%" y="469" width="0.0133%" height="15" fill="rgb(229,209,22)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="479.50"></text></g><g><title>dec25`dec25::find_cut_and_reduce::_{{closure}} (1 samples, 0.01%)</title><rect x="99.7480%" y="453" width="0.0133%" height="15" fill="rgb(234,138,34)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="463.50"></text></g><g><title>dec25`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.01%)</title><rect x="99.7480%" y="437" width="0.0133%" height="15" fill="rgb(212,95,11)" fg:x="7521" fg:w="1"/><text x="99.9980%" y="447.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.7613%" y="405" width="0.0133%" height="15" fill="rgb(240,179,47)" fg:x="7522" fg:w="1"/><text x="100.0113%" y="415.50"></text></g><g><title>dec25`core::cmp::min_by (1 samples, 0.01%)</title><rect x="99.7613%" y="389" width="0.0133%" height="15" fill="rgb(240,163,11)" fg:x="7522" fg:w="1"/><text x="100.0113%" y="399.50"></text></g><g><title>dec25`core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="99.7613%" y="373" width="0.0133%" height="15" fill="rgb(236,37,12)" fg:x="7522" fg:w="1"/><text x="100.0113%" y="383.50"></text></g><g><title>dec25`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.03%)</title><rect x="99.7613%" y="549" width="0.0265%" height="15" fill="rgb(232,164,16)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="559.50"></text></g><g><title>dec25`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.03%)</title><rect x="99.7613%" y="533" width="0.0265%" height="15" fill="rgb(244,205,15)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="543.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="99.7613%" y="517" width="0.0265%" height="15" fill="rgb(223,117,47)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="527.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.03%)</title><rect x="99.7613%" y="501" width="0.0265%" height="15" fill="rgb(244,107,35)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="511.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="99.7613%" y="485" width="0.0265%" height="15" fill="rgb(205,140,8)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="495.50"></text></g><g><title>dec25`core::hash::Hash::hash_slice (2 samples, 0.03%)</title><rect x="99.7613%" y="469" width="0.0265%" height="15" fill="rgb(228,84,46)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="479.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.03%)</title><rect x="99.7613%" y="453" width="0.0265%" height="15" fill="rgb(254,188,9)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="463.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.03%)</title><rect x="99.7613%" y="437" width="0.0265%" height="15" fill="rgb(206,112,54)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="447.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="99.7613%" y="421" width="0.0265%" height="15" fill="rgb(216,84,49)" fg:x="7522" fg:w="2"/><text x="100.0113%" y="431.50"></text></g><g><title>dec25`core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="99.7745%" y="405" width="0.0133%" height="15" fill="rgb(214,194,35)" fg:x="7523" fg:w="1"/><text x="100.0245%" y="415.50"></text></g><g><title>dec25`std::collections::hash::map::HashMap&lt;K,V&gt;::new (1 samples, 0.01%)</title><rect x="99.7878%" y="549" width="0.0133%" height="15" fill="rgb(249,28,3)" fg:x="7524" fg:w="1"/><text x="100.0378%" y="559.50"></text></g><g><title>dec25`std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="99.7878%" y="533" width="0.0133%" height="15" fill="rgb(222,56,52)" fg:x="7524" fg:w="1"/><text x="100.0378%" y="543.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="99.8011%" y="501" width="0.0133%" height="15" fill="rgb(245,217,50)" fg:x="7525" fg:w="1"/><text x="100.0511%" y="511.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="99.8011%" y="485" width="0.0133%" height="15" fill="rgb(213,201,24)" fg:x="7525" fg:w="1"/><text x="100.0511%" y="495.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="99.8011%" y="517" width="0.0265%" height="15" fill="rgb(248,116,28)" fg:x="7525" fg:w="2"/><text x="100.0511%" y="527.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="99.8143%" y="501" width="0.0133%" height="15" fill="rgb(219,72,43)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="511.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="99.8143%" y="485" width="0.0133%" height="15" fill="rgb(209,138,14)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="495.50"></text></g><g><title>dec25`&lt;dec25::Node as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="99.8143%" y="469" width="0.0133%" height="15" fill="rgb(222,18,33)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="479.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="99.8143%" y="453" width="0.0133%" height="15" fill="rgb(213,199,7)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="463.50"></text></g><g><title>dec25`core::hash::Hash::hash_slice (1 samples, 0.01%)</title><rect x="99.8143%" y="437" width="0.0133%" height="15" fill="rgb(250,110,10)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="447.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="99.8143%" y="421" width="0.0133%" height="15" fill="rgb(248,123,6)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="431.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.01%)</title><rect x="99.8143%" y="405" width="0.0133%" height="15" fill="rgb(206,91,31)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="415.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.01%)</title><rect x="99.8143%" y="389" width="0.0133%" height="15" fill="rgb(211,154,13)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="399.50"></text></g><g><title>dec25`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.8143%" y="373" width="0.0133%" height="15" fill="rgb(225,148,7)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="383.50"></text></g><g><title>dec25`core::cmp::min_by (1 samples, 0.01%)</title><rect x="99.8143%" y="357" width="0.0133%" height="15" fill="rgb(220,160,43)" fg:x="7526" fg:w="1"/><text x="100.0643%" y="367.50"></text></g><g><title>dec25`std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.04%)</title><rect x="99.8011%" y="549" width="0.0398%" height="15" fill="rgb(213,52,39)" fg:x="7525" fg:w="3"/><text x="100.0511%" y="559.50"></text></g><g><title>dec25`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.04%)</title><rect x="99.8011%" y="533" width="0.0398%" height="15" fill="rgb(243,137,7)" fg:x="7525" fg:w="3"/><text x="100.0511%" y="543.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.01%)</title><rect x="99.8276%" y="517" width="0.0133%" height="15" fill="rgb(230,79,13)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="527.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="99.8276%" y="501" width="0.0133%" height="15" fill="rgb(247,105,23)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="511.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="99.8276%" y="485" width="0.0133%" height="15" fill="rgb(223,179,41)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="495.50"></text></g><g><title>dec25`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8276%" y="469" width="0.0133%" height="15" fill="rgb(218,9,34)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="479.50"></text></g><g><title>dec25`hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8276%" y="453" width="0.0133%" height="15" fill="rgb(222,106,8)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="463.50"></text></g><g><title>dec25`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="99.8276%" y="437" width="0.0133%" height="15" fill="rgb(211,220,0)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="447.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="99.8276%" y="421" width="0.0133%" height="15" fill="rgb(229,52,16)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="431.50"></text></g><g><title>dec25`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="99.8276%" y="405" width="0.0133%" height="15" fill="rgb(212,155,18)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="415.50"></text></g><g><title>dec25`&lt;dec25::Node as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="99.8276%" y="389" width="0.0133%" height="15" fill="rgb(242,21,14)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="399.50"></text></g><g><title>dec25`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="99.8276%" y="373" width="0.0133%" height="15" fill="rgb(222,19,48)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="383.50"></text></g><g><title>dec25`core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="99.8276%" y="357" width="0.0133%" height="15" fill="rgb(232,45,27)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="367.50"></text></g><g><title>dec25`core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="99.8276%" y="341" width="0.0133%" height="15" fill="rgb(249,103,42)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="351.50"></text></g><g><title>dec25`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.8276%" y="325" width="0.0133%" height="15" fill="rgb(246,81,33)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="335.50"></text></g><g><title>dec25`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="99.8276%" y="309" width="0.0133%" height="15" fill="rgb(252,33,42)" fg:x="7527" fg:w="1"/><text x="100.0776%" y="319.50"></text></g><g><title>dec25`dec25::stoer_wagner (7,522 samples, 99.76%)</title><rect x="0.1061%" y="581" width="99.7613%" height="15" fill="rgb(209,212,41)" fg:x="8" fg:w="7522"/><text x="0.3561%" y="591.50">dec25`dec25::stoer_wagner</text></g><g><title>dec25`dec25::find_cut_and_reduce (7,522 samples, 99.76%)</title><rect x="0.1061%" y="565" width="99.7613%" height="15" fill="rgb(207,154,6)" fg:x="8" fg:w="7522"/><text x="0.3561%" y="575.50">dec25`dec25::find_cut_and_reduce</text></g><g><title>dec25`std::io::stdio::_print (2 samples, 0.03%)</title><rect x="99.8408%" y="549" width="0.0265%" height="15" fill="rgb(223,64,47)" fg:x="7528" fg:w="2"/><text x="100.0908%" y="559.50"></text></g><g><title>dec25`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.03%)</title><rect x="99.8408%" y="533" width="0.0265%" height="15" fill="rgb(211,161,38)" fg:x="7528" fg:w="2"/><text x="100.0908%" y="543.50"></text></g><g><title>dec25`core::fmt::write (2 samples, 0.03%)</title><rect x="99.8408%" y="517" width="0.0265%" height="15" fill="rgb(219,138,40)" fg:x="7528" fg:w="2"/><text x="100.0908%" y="527.50"></text></g><g><title>dec25`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.03%)</title><rect x="99.8408%" y="501" width="0.0265%" height="15" fill="rgb(241,228,46)" fg:x="7528" fg:w="2"/><text x="100.0908%" y="511.50"></text></g><g><title>dec25`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.03%)</title><rect x="99.8408%" y="485" width="0.0265%" height="15" fill="rgb(223,209,38)" fg:x="7528" fg:w="2"/><text x="100.0908%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.03%)</title><rect x="99.8408%" y="469" width="0.0265%" height="15" fill="rgb(236,164,45)" fg:x="7528" fg:w="2"/><text x="100.0908%" y="479.50"></text></g><g><title>dec25`core::ptr::drop_in_place&lt;curl::easy::handle::Easy&gt; (1 samples, 0.01%)</title><rect x="99.8674%" y="565" width="0.0133%" height="15" fill="rgb(231,15,5)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="575.50"></text></g><g><title>dec25`core::ptr::drop_in_place&lt;curl::easy::handler::Easy2&lt;curl::easy::handle::EasyData&gt;&gt; (1 samples, 0.01%)</title><rect x="99.8674%" y="549" width="0.0133%" height="15" fill="rgb(252,35,15)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="559.50"></text></g><g><title>dec25`&lt;curl::easy::handler::Easy2&lt;H&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="99.8674%" y="533" width="0.0133%" height="15" fill="rgb(248,181,18)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="543.50"></text></g><g><title>libcurl.4.dylib`curl_easy_cleanup (1 samples, 0.01%)</title><rect x="99.8674%" y="517" width="0.0133%" height="15" fill="rgb(233,39,42)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="527.50"></text></g><g><title>libcurl.4.dylib`Curl_close (1 samples, 0.01%)</title><rect x="99.8674%" y="501" width="0.0133%" height="15" fill="rgb(238,110,33)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="511.50"></text></g><g><title>libcurl.4.dylib`curl_multi_cleanup (1 samples, 0.01%)</title><rect x="99.8674%" y="485" width="0.0133%" height="15" fill="rgb(233,195,10)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="495.50"></text></g><g><title>libcurl.4.dylib`Curl_conncache_close_all_connections (1 samples, 0.01%)</title><rect x="99.8674%" y="469" width="0.0133%" height="15" fill="rgb(254,105,3)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="479.50"></text></g><g><title>libcurl.4.dylib`Curl_disconnect (1 samples, 0.01%)</title><rect x="99.8674%" y="453" width="0.0133%" height="15" fill="rgb(221,225,9)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="463.50"></text></g><g><title>libcurl.4.dylib`cf_hc_close (1 samples, 0.01%)</title><rect x="99.8674%" y="437" width="0.0133%" height="15" fill="rgb(224,227,45)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="447.50"></text></g><g><title>libcurl.4.dylib`cf_setup_close (1 samples, 0.01%)</title><rect x="99.8674%" y="421" width="0.0133%" height="15" fill="rgb(229,198,43)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="431.50"></text></g><g><title>libcurl.4.dylib`ssl_cf_close (1 samples, 0.01%)</title><rect x="99.8674%" y="405" width="0.0133%" height="15" fill="rgb(206,209,35)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="415.50"></text></g><g><title>libcurl.4.dylib`cf_close (1 samples, 0.01%)</title><rect x="99.8674%" y="389" width="0.0133%" height="15" fill="rgb(245,195,53)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="399.50"></text></g><g><title>libcurl.4.dylib`ossl_close (1 samples, 0.01%)</title><rect x="99.8674%" y="373" width="0.0133%" height="15" fill="rgb(240,92,26)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="383.50"></text></g><g><title>libssl.48.dylib`SSL_free (1 samples, 0.01%)</title><rect x="99.8674%" y="357" width="0.0133%" height="15" fill="rgb(207,40,23)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="367.50"></text></g><g><title>libssl.48.dylib`SSL_SESSION_free (1 samples, 0.01%)</title><rect x="99.8674%" y="341" width="0.0133%" height="15" fill="rgb(223,111,35)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="351.50"></text></g><g><title>libssl.48.dylib`ssl_sess_cert_free (1 samples, 0.01%)</title><rect x="99.8674%" y="325" width="0.0133%" height="15" fill="rgb(229,147,28)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="335.50"></text></g><g><title>libcrypto.46.dylib`sk_pop_free (1 samples, 0.01%)</title><rect x="99.8674%" y="309" width="0.0133%" height="15" fill="rgb(211,29,28)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="319.50"></text></g><g><title>libcrypto.46.dylib`ASN1_item_free (1 samples, 0.01%)</title><rect x="99.8674%" y="293" width="0.0133%" height="15" fill="rgb(228,72,33)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="303.50"></text></g><g><title>libcrypto.46.dylib`asn1_item_combine_free (1 samples, 0.01%)</title><rect x="99.8674%" y="277" width="0.0133%" height="15" fill="rgb(205,214,31)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="287.50"></text></g><g><title>libcrypto.46.dylib`asn1_item_combine_free (1 samples, 0.01%)</title><rect x="99.8674%" y="261" width="0.0133%" height="15" fill="rgb(224,111,15)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="271.50"></text></g><g><title>libcrypto.46.dylib`x509_name_ex_free (1 samples, 0.01%)</title><rect x="99.8674%" y="245" width="0.0133%" height="15" fill="rgb(253,21,26)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="255.50"></text></g><g><title>libcrypto.46.dylib`BUF_MEM_free (1 samples, 0.01%)</title><rect x="99.8674%" y="229" width="0.0133%" height="15" fill="rgb(245,139,43)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="99.8674%" y="213" width="0.0133%" height="15" fill="rgb(252,170,7)" fg:x="7530" fg:w="1"/><text x="100.1174%" y="223.50"></text></g><g><title>libcrypto.46.dylib`i2d_name_canon (1 samples, 0.01%)</title><rect x="99.8806%" y="197" width="0.0133%" height="15" fill="rgb(231,118,14)" fg:x="7531" fg:w="1"/><text x="100.1306%" y="207.50"></text></g><g><title>libcrypto.46.dylib`asn1_template_ex_i2d (1 samples, 0.01%)</title><rect x="99.8806%" y="181" width="0.0133%" height="15" fill="rgb(238,83,0)" fg:x="7531" fg:w="1"/><text x="100.1306%" y="191.50"></text></g><g><title>libcrypto.46.dylib`ASN1_item_ex_i2d (1 samples, 0.01%)</title><rect x="99.8806%" y="165" width="0.0133%" height="15" fill="rgb(221,39,39)" fg:x="7531" fg:w="1"/><text x="100.1306%" y="175.50"></text></g><g><title>libcrypto.46.dylib`x509_name_canon (2 samples, 0.03%)</title><rect x="99.8806%" y="213" width="0.0265%" height="15" fill="rgb(222,119,46)" fg:x="7531" fg:w="2"/><text x="100.1306%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="99.8939%" y="197" width="0.0133%" height="15" fill="rgb(222,165,49)" fg:x="7532" fg:w="1"/><text x="100.1439%" y="207.50"></text></g><g><title>libcrypto.46.dylib`asn1_template_noexp_d2i (3 samples, 0.04%)</title><rect x="99.8806%" y="277" width="0.0398%" height="15" fill="rgb(219,113,52)" fg:x="7531" fg:w="3"/><text x="100.1306%" y="287.50"></text></g><g><title>libcrypto.46.dylib`asn1_item_ex_d2i (3 samples, 0.04%)</title><rect x="99.8806%" y="261" width="0.0398%" height="15" fill="rgb(214,7,15)" fg:x="7531" fg:w="3"/><text x="100.1306%" y="271.50"></text></g><g><title>libcrypto.46.dylib`asn1_template_noexp_d2i (3 samples, 0.04%)</title><rect x="99.8806%" y="245" width="0.0398%" height="15" fill="rgb(235,32,4)" fg:x="7531" fg:w="3"/><text x="100.1306%" y="255.50"></text></g><g><title>libcrypto.46.dylib`x509_name_ex_d2i (3 samples, 0.04%)</title><rect x="99.8806%" y="229" width="0.0398%" height="15" fill="rgb(238,90,54)" fg:x="7531" fg:w="3"/><text x="100.1306%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="99.9072%" y="213" width="0.0133%" height="15" fill="rgb(213,208,19)" fg:x="7533" fg:w="1"/><text x="100.1572%" y="223.50"></text></g><g><title>libcurl.4.dylib`Curl_ssl_setup_x509_store (4 samples, 0.05%)</title><rect x="99.8806%" y="389" width="0.0531%" height="15" fill="rgb(233,156,4)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="399.50"></text></g><g><title>libcrypto.46.dylib`X509_STORE_load_locations (4 samples, 0.05%)</title><rect x="99.8806%" y="373" width="0.0531%" height="15" fill="rgb(207,194,5)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="383.50"></text></g><g><title>libcrypto.46.dylib`by_file_ctrl (4 samples, 0.05%)</title><rect x="99.8806%" y="357" width="0.0531%" height="15" fill="rgb(206,111,30)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="367.50"></text></g><g><title>libcrypto.46.dylib`X509_load_cert_crl_file (4 samples, 0.05%)</title><rect x="99.8806%" y="341" width="0.0531%" height="15" fill="rgb(243,70,54)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="351.50"></text></g><g><title>libcrypto.46.dylib`PEM_X509_INFO_read_bio (4 samples, 0.05%)</title><rect x="99.8806%" y="325" width="0.0531%" height="15" fill="rgb(242,28,8)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="335.50"></text></g><g><title>libcrypto.46.dylib`ASN1_item_d2i (4 samples, 0.05%)</title><rect x="99.8806%" y="309" width="0.0531%" height="15" fill="rgb(219,106,18)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="319.50"></text></g><g><title>libcrypto.46.dylib`asn1_item_ex_d2i (4 samples, 0.05%)</title><rect x="99.8806%" y="293" width="0.0531%" height="15" fill="rgb(244,222,10)" fg:x="7531" fg:w="4"/><text x="100.1306%" y="303.50"></text></g><g><title>libcrypto.46.dylib`x509_cb (1 samples, 0.01%)</title><rect x="99.9204%" y="277" width="0.0133%" height="15" fill="rgb(236,179,52)" fg:x="7534" fg:w="1"/><text x="100.1704%" y="287.50"></text></g><g><title>libcrypto.46.dylib`X509_NAME_oneline (1 samples, 0.01%)</title><rect x="99.9204%" y="261" width="0.0133%" height="15" fill="rgb(213,23,39)" fg:x="7534" fg:w="1"/><text x="100.1704%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.01%)</title><rect x="99.9204%" y="245" width="0.0133%" height="15" fill="rgb(238,48,10)" fg:x="7534" fg:w="1"/><text x="100.1704%" y="255.50"></text></g><g><title>libssl.48.dylib`tls13_client_init (1 samples, 0.01%)</title><rect x="99.9337%" y="373" width="0.0133%" height="15" fill="rgb(251,196,23)" fg:x="7535" fg:w="1"/><text x="100.1837%" y="383.50"></text></g><g><title>libssl.48.dylib`tls13_key_share_generate (1 samples, 0.01%)</title><rect x="99.9337%" y="357" width="0.0133%" height="15" fill="rgb(250,152,24)" fg:x="7535" fg:w="1"/><text x="100.1837%" y="367.50"></text></g><g><title>libcrypto.46.dylib`fe_mul (1 samples, 0.01%)</title><rect x="99.9337%" y="341" width="0.0133%" height="15" fill="rgb(209,150,17)" fg:x="7535" fg:w="1"/><text x="100.1837%" y="351.50"></text></g><g><title>libssl.48.dylib`tls13_handshake_msg_recv (1 samples, 0.01%)</title><rect x="99.9469%" y="357" width="0.0133%" height="15" fill="rgb(234,202,34)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="367.50"></text></g><g><title>libssl.48.dylib`tls13_buffer_extend (1 samples, 0.01%)</title><rect x="99.9469%" y="341" width="0.0133%" height="15" fill="rgb(253,148,53)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="351.50"></text></g><g><title>libssl.48.dylib`tls13_record_layer_read (1 samples, 0.01%)</title><rect x="99.9469%" y="325" width="0.0133%" height="15" fill="rgb(218,129,16)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="335.50"></text></g><g><title>libssl.48.dylib`tls13_record_layer_read_internal (1 samples, 0.01%)</title><rect x="99.9469%" y="309" width="0.0133%" height="15" fill="rgb(216,85,19)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="319.50"></text></g><g><title>libssl.48.dylib`tls13_record_recv (1 samples, 0.01%)</title><rect x="99.9469%" y="293" width="0.0133%" height="15" fill="rgb(235,228,7)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="303.50"></text></g><g><title>libssl.48.dylib`tls13_buffer_extend (1 samples, 0.01%)</title><rect x="99.9469%" y="277" width="0.0133%" height="15" fill="rgb(245,175,0)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="287.50"></text></g><g><title>libssl.48.dylib`tls13_legacy_wire_read_cb (1 samples, 0.01%)</title><rect x="99.9469%" y="261" width="0.0133%" height="15" fill="rgb(208,168,36)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="271.50"></text></g><g><title>libcrypto.46.dylib`BIO_read (1 samples, 0.01%)</title><rect x="99.9469%" y="245" width="0.0133%" height="15" fill="rgb(246,171,24)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="255.50"></text></g><g><title>libcurl.4.dylib`ossl_bio_cf_in_read (1 samples, 0.01%)</title><rect x="99.9469%" y="229" width="0.0133%" height="15" fill="rgb(215,142,24)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="239.50"></text></g><g><title>libcurl.4.dylib`cf_socket_recv (1 samples, 0.01%)</title><rect x="99.9469%" y="213" width="0.0133%" height="15" fill="rgb(250,187,7)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.01%)</title><rect x="99.9469%" y="197" width="0.0133%" height="15" fill="rgb(228,66,33)" fg:x="7536" fg:w="1"/><text x="100.1969%" y="207.50"></text></g><g><title>libcurl.4.dylib`Curl_conn_connect (7 samples, 0.09%)</title><rect x="99.8806%" y="469" width="0.0928%" height="15" fill="rgb(234,215,21)" fg:x="7531" fg:w="7"/><text x="100.1306%" y="479.50"></text></g><g><title>libcurl.4.dylib`cf_hc_connect (7 samples, 0.09%)</title><rect x="99.8806%" y="453" width="0.0928%" height="15" fill="rgb(222,191,20)" fg:x="7531" fg:w="7"/><text x="100.1306%" y="463.50"></text></g><g><title>libcurl.4.dylib`cf_setup_connect (7 samples, 0.09%)</title><rect x="99.8806%" y="437" width="0.0928%" height="15" fill="rgb(245,79,54)" fg:x="7531" fg:w="7"/><text x="100.1306%" y="447.50"></text></g><g><title>libcurl.4.dylib`ssl_cf_connect (7 samples, 0.09%)</title><rect x="99.8806%" y="421" width="0.0928%" height="15" fill="rgb(240,10,37)" fg:x="7531" fg:w="7"/><text x="100.1306%" y="431.50"></text></g><g><title>libcurl.4.dylib`ossl_connect_common (7 samples, 0.09%)</title><rect x="99.8806%" y="405" width="0.0928%" height="15" fill="rgb(214,192,32)" fg:x="7531" fg:w="7"/><text x="100.1306%" y="415.50"></text></g><g><title>libssl.48.dylib`tls13_legacy_connect (3 samples, 0.04%)</title><rect x="99.9337%" y="389" width="0.0398%" height="15" fill="rgb(209,36,54)" fg:x="7535" fg:w="3"/><text x="100.1837%" y="399.50"></text></g><g><title>libssl.48.dylib`tls13_handshake_perform (2 samples, 0.03%)</title><rect x="99.9469%" y="373" width="0.0265%" height="15" fill="rgb(220,10,11)" fg:x="7536" fg:w="2"/><text x="100.1969%" y="383.50"></text></g><g><title>libssl.48.dylib`tls13_server_certificate_recv (1 samples, 0.01%)</title><rect x="99.9602%" y="357" width="0.0133%" height="15" fill="rgb(221,106,17)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="367.50"></text></g><g><title>libssl.48.dylib`ssl_verify_cert_chain (1 samples, 0.01%)</title><rect x="99.9602%" y="341" width="0.0133%" height="15" fill="rgb(251,142,44)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="351.50"></text></g><g><title>libcrypto.46.dylib`X509_verify_cert (1 samples, 0.01%)</title><rect x="99.9602%" y="325" width="0.0133%" height="15" fill="rgb(238,13,15)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="335.50"></text></g><g><title>libcrypto.46.dylib`X509_verify_cert_orig (1 samples, 0.01%)</title><rect x="99.9602%" y="309" width="0.0133%" height="15" fill="rgb(208,107,27)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="319.50"></text></g><g><title>libcrypto.46.dylib`find_issuer (1 samples, 0.01%)</title><rect x="99.9602%" y="293" width="0.0133%" height="15" fill="rgb(205,136,37)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="303.50"></text></g><g><title>libcrypto.46.dylib`x509_check_cert_time (1 samples, 0.01%)</title><rect x="99.9602%" y="277" width="0.0133%" height="15" fill="rgb(250,205,27)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="287.50"></text></g><g><title>libcrypto.46.dylib`X509_cmp_time_internal (1 samples, 0.01%)</title><rect x="99.9602%" y="261" width="0.0133%" height="15" fill="rgb(210,80,43)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="271.50"></text></g><g><title>libcrypto.46.dylib`x509_verify_asn1_time_to_tm (1 samples, 0.01%)</title><rect x="99.9602%" y="245" width="0.0133%" height="15" fill="rgb(247,160,36)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="255.50"></text></g><g><title>libsystem_c.dylib`_st_time1 (1 samples, 0.01%)</title><rect x="99.9602%" y="229" width="0.0133%" height="15" fill="rgb(234,13,49)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="239.50"></text></g><g><title>libsystem_c.dylib`time2 (1 samples, 0.01%)</title><rect x="99.9602%" y="213" width="0.0133%" height="15" fill="rgb(234,122,0)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="223.50"></text></g><g><title>libsystem_c.dylib`time2sub (1 samples, 0.01%)</title><rect x="99.9602%" y="197" width="0.0133%" height="15" fill="rgb(207,146,38)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="207.50"></text></g><g><title>libsystem_c.dylib`gmtsub (1 samples, 0.01%)</title><rect x="99.9602%" y="181" width="0.0133%" height="15" fill="rgb(207,177,25)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (1 samples, 0.01%)</title><rect x="99.9602%" y="165" width="0.0133%" height="15" fill="rgb(211,178,42)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (1 samples, 0.01%)</title><rect x="99.9602%" y="149" width="0.0133%" height="15" fill="rgb(230,69,54)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (1 samples, 0.01%)</title><rect x="99.9602%" y="133" width="0.0133%" height="15" fill="rgb(214,135,41)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="143.50"></text></g><g><title>libsystem_c.dylib`gmt_init (1 samples, 0.01%)</title><rect x="99.9602%" y="117" width="0.0133%" height="15" fill="rgb(237,67,25)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="127.50"></text></g><g><title>libsystem_c.dylib`notify_register_tz (1 samples, 0.01%)</title><rect x="99.9602%" y="101" width="0.0133%" height="15" fill="rgb(222,189,50)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="111.50"></text></g><g><title>libsystem_notify.dylib`notify_register_check (1 samples, 0.01%)</title><rect x="99.9602%" y="85" width="0.0133%" height="15" fill="rgb(245,148,34)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.01%)</title><rect x="99.9602%" y="69" width="0.0133%" height="15" fill="rgb(222,29,6)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (1 samples, 0.01%)</title><rect x="99.9602%" y="53" width="0.0133%" height="15" fill="rgb(221,189,43)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.01%)</title><rect x="99.9602%" y="37" width="0.0133%" height="15" fill="rgb(207,36,27)" fg:x="7537" fg:w="1"/><text x="100.2102%" y="47.50"></text></g><g><title>dyld`start (7,539 samples, 99.99%)</title><rect x="0.0000%" y="709" width="99.9867%" height="15" fill="rgb(217,90,24)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="719.50">dyld`start</text></g><g><title>dec25`main (7,539 samples, 99.99%)</title><rect x="0.0000%" y="693" width="99.9867%" height="15" fill="rgb(224,66,35)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="703.50">dec25`main</text></g><g><title>dec25`std::rt::lang_start (7,539 samples, 99.99%)</title><rect x="0.0000%" y="677" width="99.9867%" height="15" fill="rgb(221,13,50)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="687.50">dec25`std::rt::lang_start</text></g><g><title>dec25`std::rt::lang_start_internal (7,539 samples, 99.99%)</title><rect x="0.0000%" y="661" width="99.9867%" height="15" fill="rgb(236,68,49)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="671.50">dec25`std::rt::lang_start_internal</text></g><g><title>dec25`std::rt::lang_start::_{{closure}} (7,539 samples, 99.99%)</title><rect x="0.0000%" y="645" width="99.9867%" height="15" fill="rgb(229,146,28)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="655.50">dec25`std::rt::lang_start::_{{closure}}</text></g><g><title>dec25`std::sys_common::backtrace::__rust_begin_short_backtrace (7,539 samples, 99.99%)</title><rect x="0.0000%" y="629" width="99.9867%" height="15" fill="rgb(225,31,38)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="639.50">dec25`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dec25`core::ops::function::FnOnce::call_once (7,539 samples, 99.99%)</title><rect x="0.0000%" y="613" width="99.9867%" height="15" fill="rgb(250,208,3)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="623.50">dec25`core::ops::function::FnOnce::call_once</text></g><g><title>dec25`dec25::main (7,539 samples, 99.99%)</title><rect x="0.0000%" y="597" width="99.9867%" height="15" fill="rgb(246,54,23)" fg:x="0" fg:w="7539"/><text x="0.2500%" y="607.50">dec25`dec25::main</text></g><g><title>dec25`input_curler::input_for (9 samples, 0.12%)</title><rect x="99.8674%" y="581" width="0.1194%" height="15" fill="rgb(243,76,11)" fg:x="7530" fg:w="9"/><text x="100.1174%" y="591.50"></text></g><g><title>dec25`curl::easy::handle::Transfer::perform (8 samples, 0.11%)</title><rect x="99.8806%" y="565" width="0.1061%" height="15" fill="rgb(245,21,50)" fg:x="7531" fg:w="8"/><text x="100.1306%" y="575.50"></text></g><g><title>dec25`curl::easy::handle::Easy::do_perform (8 samples, 0.11%)</title><rect x="99.8806%" y="549" width="0.1061%" height="15" fill="rgb(228,9,43)" fg:x="7531" fg:w="8"/><text x="100.1306%" y="559.50"></text></g><g><title>dec25`curl::easy::handler::Easy2&lt;H&gt;::perform (8 samples, 0.11%)</title><rect x="99.8806%" y="533" width="0.1061%" height="15" fill="rgb(208,100,47)" fg:x="7531" fg:w="8"/><text x="100.1306%" y="543.50"></text></g><g><title>libcurl.4.dylib`curl_easy_perform (8 samples, 0.11%)</title><rect x="99.8806%" y="517" width="0.1061%" height="15" fill="rgb(232,26,8)" fg:x="7531" fg:w="8"/><text x="100.1306%" y="527.50"></text></g><g><title>libcurl.4.dylib`curl_multi_perform (8 samples, 0.11%)</title><rect x="99.8806%" y="501" width="0.1061%" height="15" fill="rgb(216,166,38)" fg:x="7531" fg:w="8"/><text x="100.1306%" y="511.50"></text></g><g><title>libcurl.4.dylib`multi_runsingle (8 samples, 0.11%)</title><rect x="99.8806%" y="485" width="0.1061%" height="15" fill="rgb(251,202,51)" fg:x="7531" fg:w="8"/><text x="100.1306%" y="495.50"></text></g><g><title>libcurl.4.dylib`Curl_readwrite (1 samples, 0.01%)</title><rect x="99.9735%" y="469" width="0.0133%" height="15" fill="rgb(254,216,34)" fg:x="7538" fg:w="1"/><text x="100.2235%" y="479.50"></text></g><g><title>libcurl.4.dylib`Curl_read (1 samples, 0.01%)</title><rect x="99.9735%" y="453" width="0.0133%" height="15" fill="rgb(251,32,27)" fg:x="7538" fg:w="1"/><text x="100.2235%" y="463.50"></text></g><g><title>libcurl.4.dylib`cf_h2_recv (1 samples, 0.01%)</title><rect x="99.9735%" y="437" width="0.0133%" height="15" fill="rgb(208,127,28)" fg:x="7538" fg:w="1"/><text x="100.2235%" y="447.50"></text></g><g><title>libcurl.4.dylib`h2_progress_ingress (1 samples, 0.01%)</title><rect x="99.9735%" y="421" width="0.0133%" height="15" fill="rgb(224,137,22)" fg:x="7538" fg:w="1"/><text x="100.2235%" y="431.50"></text></g><g><title>libcurl.4.dylib`Curl_bufq_peek (1 samples, 0.01%)</title><rect x="99.9735%" y="405" width="0.0133%" height="15" fill="rgb(254,70,32)" fg:x="7538" fg:w="1"/><text x="100.2235%" y="415.50"></text></g><g><title>all (7,540 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(229,75,37)" fg:x="0" fg:w="7540"/><text x="0.2500%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1 samples, 0.01%)</title><rect x="99.9867%" y="709" width="0.0133%" height="15" fill="rgb(252,64,23)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="719.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (1 samples, 0.01%)</title><rect x="99.9867%" y="693" width="0.0133%" height="15" fill="rgb(232,162,48)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="703.50"></text></g><g><title>libcurl.4.dylib`curl_thread_create_thunk (1 samples, 0.01%)</title><rect x="99.9867%" y="677" width="0.0133%" height="15" fill="rgb(246,160,12)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="687.50"></text></g><g><title>libcurl.4.dylib`getaddrinfo_thread (1 samples, 0.01%)</title><rect x="99.9867%" y="661" width="0.0133%" height="15" fill="rgb(247,166,0)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="671.50"></text></g><g><title>libcurl.4.dylib`Curl_getaddrinfo_ex (1 samples, 0.01%)</title><rect x="99.9867%" y="645" width="0.0133%" height="15" fill="rgb(249,219,21)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="655.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (1 samples, 0.01%)</title><rect x="99.9867%" y="629" width="0.0133%" height="15" fill="rgb(205,209,3)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="639.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (1 samples, 0.01%)</title><rect x="99.9867%" y="613" width="0.0133%" height="15" fill="rgb(243,44,1)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="623.50"></text></g><g><title>Network`nw_path_libinfo_path_check (1 samples, 0.01%)</title><rect x="99.9867%" y="597" width="0.0133%" height="15" fill="rgb(206,159,16)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="607.50"></text></g><g><title>Network`nw_parameters_create_legacy_tcp_socket (1 samples, 0.01%)</title><rect x="99.9867%" y="581" width="0.0133%" height="15" fill="rgb(244,77,30)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.01%)</title><rect x="99.9867%" y="565" width="0.0133%" height="15" fill="rgb(218,69,12)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.01%)</title><rect x="99.9867%" y="549" width="0.0133%" height="15" fill="rgb(212,87,7)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="559.50"></text></g><g><title>Network`__nw_protocol_setup_ip_definition_block_invoke (1 samples, 0.01%)</title><rect x="99.9867%" y="533" width="0.0133%" height="15" fill="rgb(245,114,25)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="543.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.01%)</title><rect x="99.9867%" y="517" width="0.0133%" height="15" fill="rgb(210,61,42)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="527.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.01%)</title><rect x="99.9867%" y="501" width="0.0133%" height="15" fill="rgb(211,52,33)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="511.50"></text></g><g><title>Network`nw_protocol_register_extended (1 samples, 0.01%)</title><rect x="99.9867%" y="485" width="0.0133%" height="15" fill="rgb(234,58,33)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="495.50"></text></g><g><title>Network`nw_allow_use_of_dispatch_internal (1 samples, 0.01%)</title><rect x="99.9867%" y="469" width="0.0133%" height="15" fill="rgb(220,115,36)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="479.50"></text></g><g><title>Network`networkd_settings_init (1 samples, 0.01%)</title><rect x="99.9867%" y="453" width="0.0133%" height="15" fill="rgb(243,153,54)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="463.50"></text></g><g><title>Network`networkd_settings_read_from_file() (1 samples, 0.01%)</title><rect x="99.9867%" y="437" width="0.0133%" height="15" fill="rgb(251,47,18)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (1 samples, 0.01%)</title><rect x="99.9867%" y="421" width="0.0133%" height="15" fill="rgb(242,102,42)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (1 samples, 0.01%)</title><rect x="99.9867%" y="405" width="0.0133%" height="15" fill="rgb(234,31,38)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (1 samples, 0.01%)</title><rect x="99.9867%" y="389" width="0.0133%" height="15" fill="rgb(221,117,51)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="399.50"></text></g><g><title>Network`nwlog_legacy_init_once() (1 samples, 0.01%)</title><rect x="99.9867%" y="373" width="0.0133%" height="15" fill="rgb(212,20,18)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="383.50"></text></g><g><title>libsystem_trace.dylib`os_log_create (1 samples, 0.01%)</title><rect x="99.9867%" y="357" width="0.0133%" height="15" fill="rgb(245,133,36)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="367.50"></text></g><g><title>libsystem_trace.dylib`_os_log_preferences_refresh (1 samples, 0.01%)</title><rect x="99.9867%" y="341" width="0.0133%" height="15" fill="rgb(212,6,19)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="351.50"></text></g><g><title>libsystem_trace.dylib`_os_log_preferences_load (1 samples, 0.01%)</title><rect x="99.9867%" y="325" width="0.0133%" height="15" fill="rgb(218,1,36)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="335.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_read_plist_at (1 samples, 0.01%)</title><rect x="99.9867%" y="309" width="0.0133%" height="15" fill="rgb(246,84,54)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="319.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_read_file_at (1 samples, 0.01%)</title><rect x="99.9867%" y="293" width="0.0133%" height="15" fill="rgb(242,110,6)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__openat (1 samples, 0.01%)</title><rect x="99.9867%" y="277" width="0.0133%" height="15" fill="rgb(214,47,5)" fg:x="7539" fg:w="1"/><text x="100.2367%" y="287.50"></text></g></svg></svg>